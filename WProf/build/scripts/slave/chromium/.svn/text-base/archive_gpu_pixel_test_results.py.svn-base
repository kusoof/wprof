#!/usr/bin/env python
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""A tool to archive Chrome gpu pixel test results generated by buildbots.

Pushes generated images, their associated reference images, and the diffs
between the two to Google Storage.

For a list of command-line options, call this script with '--help'.
"""

import optparse
import os
import re
import subprocess
import sys

from common import chromium_utils

GOOGLE_STORAGE_BUCKET = 'chromium-browser-gpu-tests'


def CopyToGoogleStorage(src, dst):
  """Copies a file to the given Google Storage destination url.

  Args:
    src: path to file to be copied
    dst: Google Storage destination url (i.e., gs://...)
  Returns:
    whether the copy was successful
  """
  if not os.path.exists(src):
    print 'No such file', src
    return False
  gsutil = os.environ.get('GSUTIL', 'gsutil')
  # gsutil will look in the $HOME directory for the config file.
  # Set $HOME to /b/build/site_config/ temporarily where .boto stays.
  old_env = os.environ.copy()
  # This script is under /b/build/scripts/slave/chromium/
  os.environ['HOME'] = os.path.join('..', '..', '..', 'site_config')
  retcode = subprocess.call([gsutil, 'cp', '-a', 'public-read', src, dst])
  os.environ = old_env
  if retcode == 0:
    return True
  return False


def Archive(run_id, gen_dir, gpu_ref_dir):
  """Archive the gpu pixel test results to Google Storage. These results consist
  of all the mismatching images associated with the failing tests. The
  corresponding reference image and diff is uploaded with each mismatching
  image also.

  Args:
    run_id: the unique identifier of this run
    gen_dir: the path to the generated image directory
    gpu_ref_dir: the path to the gpu-rendered reference image directory
  Returns:
    whether all the failing images were correctly uploaded
  """
  if not os.path.exists(gen_dir):
    print 'No failing test images to archive'
    return True

  run_id = re.sub('\W+', '_', run_id)

  view_url = 'http://%s.commondatastorage.googleapis.com/' \
             'view_test_results.html?%s' % (GOOGLE_STORAGE_BUCKET, run_id)
  print 'See %s for this run\'s test results' % view_url
  run_url = 'gs://%s/runs/%s/' % (GOOGLE_STORAGE_BUCKET, run_id)
  print 'Pushing results to %s...' % run_url

  success = True
  filenames = os.listdir(gen_dir)
  for filename in filenames:
    base_filename = filename[5:]
    full_path = os.path.join(gen_dir, filename)
    if filename.startswith('DIFF_'):
      if not CopyToGoogleStorage(full_path,
                                 run_url + 'diff/' + base_filename):
        success = False
    elif filename.startswith('FAIL_'):
      if not CopyToGoogleStorage(full_path,
                                 run_url + 'gen/' + base_filename):
        success = False
      # Copy the appropriate reference image.
      ref = os.path.join(gpu_ref_dir, base_filename)
      if not os.path.exists(ref):
        print 'Cannot find reference image ', base_filename
        success = False
        continue
      if not CopyToGoogleStorage(ref, run_url + 'ref/' + base_filename):
        success = False
  return success


def main():
  option_parser = optparse.OptionParser()
  option_parser.add_option('', '--run-id', default=None,
                           help='unique id for this run')
  option_parser.add_option('', '--generated-dir', default=None,
                           help='path to the generated images directory')
  option_parser.add_option('', '--gpu-reference-dir', default=None,
                           help=('path to the directory holding the reference'
                                 'images generated by the gpu'))
  # --sw-reference-dir is ignored.  We keep it here so we don't have to
  # modify master side script.
  option_parser.add_option('', '--sw-reference-dir', default=None,
                           help=('path to the directory holding the reference'
                                 'images generated by the software renderer'))
  options = option_parser.parse_args()[0]
  if (options.run_id is None or
      options.generated_dir is None or
      options.gpu_reference_dir is None):
    print 'All command options are required. Use --help.'
    return 1

  if Archive(options.run_id,
             options.generated_dir,
             options.gpu_reference_dir):
    retcode = 0
  else:
    retcode = 2
  chromium_utils.RemoveDirectory(options.generated_dir)
  return retcode


if '__main__' == __name__:
  sys.exit(main())

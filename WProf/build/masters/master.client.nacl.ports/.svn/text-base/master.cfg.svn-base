# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'nacl' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


from buildbot.changes import svnpoller
from buildbot.scheduler import Periodic
from buildbot.scheduler import Scheduler

from master import master_utils
from master import build_utils
from master import slaves_list
from master.factory import nacl_ports_factory

import config

ActiveMaster = config.Master.NativeClientPorts

TREE_GATE_KEEPER = ActiveMaster.is_production_host
GOOD_REVISIONS = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def NativeClientPortsTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  projects = ['src']
  for p in projects:
    if path.startswith(p + '/'):
      return (p, path[len(p)+1:])
  return None

# Polls config.Master.nacl_trunk_url for changes
trunk_poller = svnpoller.SVNPoller(
    svnurl=config.Master.nacl_ports_trunk_url,
    split_file=NativeClientPortsTreeFileSplitter,
    revlinktmpl='http://code.google.com/p/naclports/source/detail?r=%s',
    pollinterval=10)

c['change_source'] = [trunk_poller]


####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.


# ----------------------------------------------------------------------------
# FACTORIES

m_win = nacl_ports_factory.NativeClientPortsFactory(
    build_dir='native_client_ports', target_platform='win32')
m_linux = nacl_ports_factory.NativeClientPortsFactory(
    build_dir='native_client_ports', target_platform='linux2')
m_mac = nacl_ports_factory.NativeClientPortsFactory(
    build_dir='native_client_ports', target_platform='darwin')

# Some shortcut to simplify the code below.
F_WIN = m_win.NativeClientPortsFactory
F_LINUX = m_linux.NativeClientPortsFactory
F_MAC = m_mac.NativeClientPortsFactory


# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

# BuilderTesters using a custom build configuration.
factories = []

# Regular and periodic versions.
for when in ['', 'periodic-']:
  for libc in ['newlib', 'glibc']:
    base = {'': 0, 'periodic-': 3}[when]
    # Windows shared into 7 parts.
    for shard in range(7):
      factories.append(['%swin-%s-%d' % (when, libc, shard),
                        '%02d%swin-%s|closer' % (base + 1, when, libc),
                        F_WIN()])
    # Mac/Linux sharded into 3 parts.
    for shard in range(3):
      factories.append(['%smac-%s-%d' % (when, libc, shard),
                        '%02d%smac-%s|closer' % (base + 2, when, libc),
                        F_MAC()])
      factories.append(['%slinux-%s-%d' % (when, libc, shard),
                        '%02d%slinux-%s|closer' % (base + 3, when, libc),
                        F_LINUX()])


# pnacl
factories.append(['linux-pnacl_newlib-all',
                  '10pnacl|closer', F_LINUX()])
factories.append(['periodic-linux-pnacl_newlib-all',
                  '10pnacl|closer', F_LINUX()])


all_builders = [f[0] for f in factories]
checkin_builders = [b for b in all_builders if not b.startswith('periodic-')]
periodic_builders = [b for b in all_builders if b.startswith('periodic-')]


####### SCHEDULERS
## configure the Schedulers
# Main scheduler for all changes in trunk.
s_checkin = Scheduler(
   name='checkin',
   branch='src',
   treeStableTimer=60,
   builderNames=checkin_builders,
)
# Periodic scheduler Main scheduler for all changes in trunk.
s_periodic = Periodic(
   name='periodic',
   periodicBuildTimer=7*60*60,  # Every 7 hours.
   builderNames=periodic_builders,
)
c['schedulers'] = [s_checkin, s_periodic]


# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

c['builders'] = []
slaves = slaves_list.SlavesList('slaves.cfg', 'NativeClientPorts')
for f in factories:
  c['builders'].append({
      'name': f[0],
      'slavenames': slaves.GetSlavesName(builder=f[0]),
      'builddir': f[0],
      'factory': f[2],
      'category': '%s|full' % f[1],
      'auto_reboot': ActiveMaster.is_production_host,
  })


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
                             public_html='../master.chromium/public_html',
                             templates=['./templates',
                                        '../master.client.nacl/templates'])


# Convert factories to a list of (factory_name, factory_object) pairs.
factories_bare = [(f[0], f[2]) for f in factories]
# Filter out factories for testers (which contain -test-), since these
# have bad source stamps preventing them from being included in lkgr.
factories_bare = [f for f in factories_bare if '-test-' not in f[0]]
# Create mapping of builder name to list of steps.
builder_steps = build_utils.ExtractFactoriesSteps(factories_bare)
all_steps = build_utils.AllFactoriesSteps(factories_bare)


if TREE_GATE_KEEPER:
  from master import gatekeeper
  # This is the list of the builder categories and the corresponding critical
  # steps. If one critical step fails, gatekeeper will close the tree
  # automatically.
  categories_steps = {
      '': ['update scripts', 'update'],
      'info': [],
      'closer': all_steps,
  }
  exclusions = {}
  forgiving_steps = []
  c['status'].append(gatekeeper.GateKeeper(
      fromaddr=ActiveMaster.from_address,
      categories_steps=categories_steps,
      exclusions=exclusions,
      relayhost=config.Master.smtp,
      subject='buildbot %(result)s in %(projectName)s on %(builder)s, '
              'revision %(revision)s',
      extraRecipients=ActiveMaster.tree_closing_notification_recipients,
      tree_status_url=ActiveMaster.tree_status_url,
      forgiving_steps=forgiving_steps))

if GOOD_REVISIONS:
  from master import goodrevisions
  c['status'].append(goodrevisions.GoodRevisions(
      good_revision_steps={'': all_steps},
      store_revisions_url=ActiveMaster.store_revisions_url))


####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/client.nacl.ports/'

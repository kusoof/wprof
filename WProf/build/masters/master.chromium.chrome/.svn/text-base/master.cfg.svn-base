# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.changes import svnpoller
from buildbot.scheduler import Scheduler

# These modules come from scripts/master, which must be in the PYTHONPATH.
from master import build_utils
from master import master_utils
from master import slaves_list

from master.factory import chromium_factory

# These modules come from scripts/common, which must be in the PYTHONPATH.
import config

ActiveMaster = config.Master.ChromiumChrome

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # Exclude .DEPS.git from triggering builds on chrome.
  if path == 'src/.DEPS.git':
    return None

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return build_utils.SplitPath(projects, path)

# Rev link urls.
chromium_rev = 'http://src.chromium.org/viewvc/chrome?view=rev&revision=%s'

# Polls config.Master.trunk_url for changes
trunk_poller = svnpoller.SVNPoller(svnurl=config.Master.trunk_url,
                                   split_file=ChromeTreeFileSplitter,
                                   pollinterval=10,
                                   revlinktmpl=chromium_rev)

c['change_source'] = [trunk_poller]


####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk.
s_chromium = Scheduler(name='chromium',
                       branch='src',
                       treeStableTimer=60,
                       builderNames=['Google Chrome Win',
                                     'Google Chrome Linux',
                                     'Google Chrome Linux x64',
                                     'Google Chrome Mac',
                                     'Google Chrome ChromeOS'])

c['schedulers'] = [s_chromium]

####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

F = chromium_factory.ChromiumFactory
def win(): return F('src/build', 'win32')
def mac(): return F('src/build', 'darwin')
def linux(): return F('src/build', 'linux2')
def chromeos(): return F('src/build', 'linux2')

# Please contact chrome-re before changing this _google_chrome_rel builder
f_google_chrome_rel_win = win().ChromiumFactory(
    clobber=True,
    compile_timeout=4800,
    mode='google_chrome',
    project='all.sln',
    tests=[],
    factory_properties={
        'gclient_env': {'GYP_DEFINES': 'branding=Chrome '
                        'component=static_library'}})

# Please contact chrome-re before changing this _google_chrome_rel builder
f_google_chrome_rel_linux = linux().ChromiumFactory(
    mode='official',
    clobber=True,
    compile_timeout=2400,
    tests=[],
    options=['--compiler=goma'],
    factory_properties={
        'gclient_env': {'GYP_DEFINES': 'branding=Chrome buildtype=Official '
                        'target_arch=ia32 component=static_library'}})

# Please contact chrome-re before changing this _google_chrome_rel builder
f_google_chrome_rel_linux_64 = linux().ChromiumFactory(
    mode='official',
    clobber=True,
    compile_timeout=2400,
    tests=[],
    options=['--compiler=goma'],
    factory_properties={
        'gclient_env': {'GYP_DEFINES': 'branding=Chrome buildtype=Official '
                        'target_arch=x64 component=static_library'}})

# Please contact chrome-re before changing this _google_chrome_rel builder
f_google_chrome_rel_mac = mac().ChromiumFactory(
    mode='official',
    clobber=True,
    compile_timeout=2400,
    tests=[],
    options=['--compiler=goma-clang'],
    factory_properties={
      'gclient_env': {
        # clang=1 in GYP_DEFINES is added to branded builds automatically,
        # but ChromiumFactory needs it to know that an "update clang" step
        # has to be added.
        'GYP_DEFINES': 'branding=Chrome buildtype=Official clang=1 '
                       'component=static_library',
      },
    })

# Please contact chrome-re before changing this _google_chrome_rel builder
f_google_chrome_rel_chromeos = chromeos().ChromiumOSFactory(
    mode='official',
    clobber=True,
    options=['--compiler=goma', 'chrome', 'chrome_sandbox', 'linux_symbols',
             'symupload'],
    compile_timeout=2400,
    tests=[],
    factory_properties={
        'gclient_env': {
            'GYP_DEFINES':
                'branding=Chrome buildtype=Official target_arch=ia32 '
                'linux_sandbox_path=/opt/google/chrome/chrome-sandbox '
                'chromeos=1 component=static_library'}})

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

b_google_chrome_rel_win = {
  'name': 'Google Chrome Win',
  'builddir': 'google-chrome-rel-win',
  'factory': f_google_chrome_rel_win,
  'notify_on_missing': True,
}

b_google_chrome_rel_linux = {
  'name': 'Google Chrome Linux',
  'builddir': 'google-chrome-rel-linux',
  'factory': f_google_chrome_rel_linux,
  'notify_on_missing': True,
}

b_google_chrome_rel_linux_64 = {
  'name': 'Google Chrome Linux x64',
  'builddir': 'google-chrome-rel-linux_64',
  'factory': f_google_chrome_rel_linux_64,
  'notify_on_missing': True,
}

b_google_chrome_rel_mac = {
  'name': 'Google Chrome Mac',
  'builddir': 'google-chrome-rel-mac',
  'factory': f_google_chrome_rel_mac,
  'notify_on_missing': True,
}

b_google_chrome_rel_chromeos = {
  'name': 'Google Chrome ChromeOS',
  'builddir': 'google-chrome-rel-chromeos',
  'factory': f_google_chrome_rel_chromeos,
  'notify_on_missing': True,
}

c['builders'] = [
  b_google_chrome_rel_win,
  b_google_chrome_rel_linux,
  b_google_chrome_rel_linux_64,
  b_google_chrome_rel_mac,
  b_google_chrome_rel_chromeos,
]

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumChrome')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(
    c['builders'],
    config.Master.GetBotPassword(),
    missing_recipients=['buildbot@chromium-build-health.appspotmail.com'])

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    templates=['../master.chromium/templates'],
    enable_http_status_push=ActiveMaster.is_production_host)

####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/buildbot/chromium.chrome/'

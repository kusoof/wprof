# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import urlparse

from buildbot.scheduler import Periodic

from common import chromium_utils
from master import build_utils
from master import chromium_step
from master import master_config
from master import master_utils
from master import slaves_list
from master.factory import chromium_factory

import config

ActiveMaster = config.Master.ChromiumFlaky

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### SCHEDULERS

# Keep the bots busy all the time by scheduling builds very frequently.
s_chromium_periodic = Periodic(name="all-the-time",
                               builderNames=['Linux Flaky Builder (dbg)',
                                             'Linux Flaky Tester (dbg)',
                                             'Win Flaky Builder (dbg)',
                                             'Win Flaky Tester (dbg)',
                                             'Mac Flaky Builder (dbg)',
                                             'Mac Flaky Tester (dbg)'],
                               periodicBuildTimer=75*60)  # in seconds

c['schedulers'] = [s_chromium_periodic]

# Avoid having many requests pending by merging everything.
def mergeRequests(builder, request1, request2):
	return True
c['mergeRequests'] = mergeRequests

####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

# Note: this is very similar to master_config.GetArchiveUrl,
# but our builder is serving from a different location.
def GetArchiveUrl(machine_name, builder_name, zip_os_name):
  slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumFlaky')
  host = slaves.GetSlaveName('ChromiumFlaky', machine_name)
  if not host:
    raise ValueError("%s isn't reachable" % machine_name)
  return ('http://%s/%s/chrome_staging/full-build-%s.zip' % (
              host, builder_name, zip_os_name))

linux_dbg_archive = GetArchiveUrl('Linux Flaky Builder (dbg)',
                                  'chromium-linux-flaky-builder-dbg',
                                  'linux')

win_dbg_archive = GetArchiveUrl('Win Flaky Builder (dbg)',
                                'chromium-win-flaky-builder-dbg',
                                'win32')

mac_dbg_archive = master_config.GetArchiveUrl('ChromiumFlaky',
                                              'Mac Flaky Builder (dbg)',
                                              'chromium-mac-flaky-builder-dbg',
                                              'mac')

def GetSafesyncUrl(archive_url):
  return urlparse.urljoin(archive_url,
                          chromium_utils.FULL_BUILD_REVISION_FILENAME)

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_linux = chromium_factory.ChromiumFactory('src/build',
                                           target_platform='linux2')

m_win = chromium_factory.ChromiumFactory('src/build',
                                         target_platform='win32')

m_mac = chromium_factory.ChromiumFactory('src/build',
                                         target_platform='darwin')

f_chromium_linux_flaky_builder = m_linux.ChromiumFactory(
    slave_type='Builder',
    clobber=True,
    options=['browser_tests'],
    factory_properties={'lkgr': True})

f_chromium_linux_flaky_tester_browser = m_linux.ChromiumFactory(
    slave_type='Tester',
    build_url=linux_dbg_archive,
    factory_properties={
        'halt_on_missing_build': True,
        'safesync_url': GetSafesyncUrl(linux_dbg_archive),
    },
    tests=['browser_tests'])

f_chromium_win_flaky_builder = m_win.ChromiumFactory(
    slave_type='Builder',
    clobber=True,
    project='all.sln;chromium_builder_tests',
    factory_properties={'lkgr': True,
                        'gclient_env': {'GYP_DEFINES': 'fastbuild=1'}})

f_chromium_win_flaky_tester_browser = m_win.ChromiumFactory(
    slave_type='Tester',
    build_url=win_dbg_archive,
    factory_properties={
        'halt_on_missing_build': True,
        'process_dumps': True,
        'safesync_url': GetSafesyncUrl(win_dbg_archive),
        'start_crash_handler': True,
    },
    tests=['browser_tests'])

f_chromium_mac_flaky_builder = m_mac.ChromiumFactory(
    slave_type='Builder',
    clobber=True,
    options=['--compiler=clang', '--', '-target', 'chromium_builder_tests'],
    factory_properties={'lkgr': True,
                        'gclient_env': {'GYP_DEFINES': 'clang=1'}})

f_chromium_mac_flaky_tester_browser = m_mac.ChromiumFactory(
    slave_type='Tester',
    build_url=mac_dbg_archive,
    factory_properties={
        'halt_on_missing_build': True,
        'safesync_url': GetSafesyncUrl(mac_dbg_archive),
    },
    tests=['browser_tests'])

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

b_chromium_linux_flaky_builder = {
  'name': 'Linux Flaky Builder (dbg)',
  'builddir': 'chromium-linux-flaky-builder-dbg',
  'factory': f_chromium_linux_flaky_builder,
  'notify_on_missing': True,

  # Builders need to run all the time so that testers can fetch builds.
  'auto_reboot': False,
}

b_chromium_linux_flaky_tester = {
  'name': 'Linux Flaky Tester (dbg)',
  'builddir': 'chromium-linux-flaky-tester',
  'factory': f_chromium_linux_flaky_tester_browser,
  'notify_on_missing': True,
  'auto_reboot': True,
}

b_chromium_win_flaky_builder = {
  'name': 'Win Flaky Builder (dbg)',
  'builddir': 'chromium-win-flaky-builder-dbg',
  'factory': f_chromium_win_flaky_builder,
  'notify_on_missing': True,

  # Builders need to run all the time so that testers can fetch builds.
  'auto_reboot': False,
}

b_chromium_win_flaky_tester = {
  'name': 'Win Flaky Tester (dbg)',
  'builddir': 'chromium-win-flaky-tester',
  'factory': f_chromium_win_flaky_tester_browser,
  'notify_on_missing': True,
  'auto_reboot': True,
}

b_chromium_mac_flaky_builder = {
  'name': 'Mac Flaky Builder (dbg)',
  'builddir': 'chromium-mac-flaky-builder-dbg',
  'factory': f_chromium_mac_flaky_builder,
  'notify_on_missing': True,

  # Builders need to run all the time so that testers can fetch builds.
  'auto_reboot': False,
}

b_chromium_mac_flaky_tester = {
  'name': 'Mac Flaky Tester (dbg)',
  'builddir': 'chromium-mac-flaky-tester',
  'factory': f_chromium_mac_flaky_tester_browser,
  'notify_on_missing': True,
  'auto_reboot': True,
}

c['builders'] = [b_chromium_linux_flaky_builder,
                 b_chromium_linux_flaky_tester,
                 b_chromium_win_flaky_builder,
                 b_chromium_win_flaky_tester,
                 b_chromium_mac_flaky_builder,
                 b_chromium_mac_flaky_tester]

# Associate the slaves to the builders. The configuration is in slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumFlaky')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(
    c['builders'],
    config.Master.GetBotPassword(),
    missing_recipients=['buildbot@chromium-build-health.appspotmail.com'])

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html="../master.chromium.git/public_html",
    templates=['../master.chromium/templates'],
    enable_http_status_push=ActiveMaster.is_production_host)

####### PROJECT IDENTITY

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url
c['buildbotURL'] = 'http://build.chromium.org/p/chromium.flaky/'

# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'experimental' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

from buildbot.changes.filter import ChangeFilter
from buildbot.schedulers.timed import Periodic
from buildbot.scheduler import Triggerable

from master import build_utils
from master import chromium_step
from master import master_utils
from master import slaves_list
from master.factory import chromium_factory

import config

ActiveMaster = config.Master.ChromiumChromebot

MAIL_NOTIFIER = ActiveMaster.is_production_host
PB_LISTENER = False
STATUS_PUSH = ActiveMaster.is_production_host


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port

# Available Chromebot client machines in slaves.cfg.
win_chromebot_client_names = [
    'Win Chromebot Client %s' % i for i in xrange(1, 7)
]
linux_chromebot_client_names = [
    'Linux Chromebot Client %s' % i for i in xrange(1, 7)
]

####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.

c['change_source'] = []


####### SCHEDULERS

## configure the Schedulers

# Periodic scheduler that starts the Chromebot server.
s_chromebot_server = Periodic(
    name='chromebot_server',
    periodicBuildTimer=60*60+60, # in seconds
    builderNames=['Win Chromebot Server',
                  'Linux Chromebot Server'])

# Scheduler to trigger slaves that depend on Win Chromebot server.
s_win_chromebot_trigger = Triggerable(
    name='chromebot-win-trigger',
    builderNames=win_chromebot_client_names)

# Scheduler to trigger slaves that depend on Linux Chromebot server.
s_linux_chromebot_trigger = Triggerable(
    name='chromebot-linux-trigger',
    builderNames=linux_chromebot_client_names)

c['schedulers'] = [s_chromebot_server,
                   s_win_chromebot_trigger,
                   s_linux_chromebot_trigger]


####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.


def GetHostName(builder_name):
  slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumChromebot')
  host = slaves.GetHostName('ChromiumChromebot', builder_name)
  if not host:
    raise ValueError("%s isn't reachable" % builder_name)
  return host

def GetBuildUrl(builder_name):
  host = GetHostName(builder_name)
  build_dir = builder_name.replace(' ', '-').lower()
  return ('http://%s/chromium/%s/Release' % (host, build_dir))

def GetWebBuildDir(builder_name):
  build_dir = builder_name.replace(' ', '-').lower()
  return ('/var/www/chromium/%s' % build_dir)

win_build_url = GetBuildUrl('Win Chromebot Server')
win_web_build_dir = GetWebBuildDir('Win Chromebot Server')
linux_build_url = GetBuildUrl('Linux Chromebot Server')
linux_web_build_dir = GetWebBuildDir('Linux Chromebot Server')

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_win = chromium_factory.ChromiumFactory('src/build', 'win32')
m_linux = chromium_factory.ChromiumFactory('src/build', 'linux2')

# Chromebot script factory properties:
#   trigger: trigger name to start Chromebot client.
#   server_port: Port number for Chromebot Server/Client.
#   client_os: targeted platform ('win', 'linux', 'linux64').
#   timeout: max time(seconds) to run Chromebot script.
#   proxy_servers: List of proxy servers that the Chromebot client can use.
#   config: Custom config file for Chromebot script.

chromebot_config_golo = '~/chromebot_config/golo.cfg'
proxy_servers = ['build1-m6.golo.chromium.org:3128']

f_win_chromebot_server = m_linux.ChromiumChromebotFactory(
    slave_type='ChromebotServer',
    web_build_dir=win_web_build_dir,
    factory_properties={
        'trigger': 'chromebot-win-trigger',
        'server_port': 18000,
        'client_os': 'win',
        'timeout': 1 * 60 * 60,
        'config': chromebot_config_golo,
        'build_type': 'chromium'})

f_win_chromebot_client = m_win.ChromiumChromebotFactory(
    slave_type='ChromebotClient',
    build_url=win_build_url,
    factory_properties={
        'server_hostname': GetHostName('Win Chromebot Server'),
        'server_port': 18000,
        'client_os': 'win',
        'proxy_servers': proxy_servers})

f_linux_chromebot_server = m_linux.ChromiumChromebotFactory(
    slave_type='ChromebotServer',
    web_build_dir=linux_web_build_dir,
    factory_properties={
        'trigger': 'chromebot-linux-trigger',
        'server_port': 18001,
        'client_os': 'linux64',
        'timeout': 1 * 60 * 60,
        'config': chromebot_config_golo,
        'build_type': 'chromium'})

f_linux_chromebot_client = m_linux.ChromiumChromebotFactory(
    slave_type='ChromebotClient',
    build_url=linux_build_url,
    factory_properties={
        'server_hostname': GetHostName('Linux Chromebot Server'),
        'server_port': 18001,
        'client_os': 'linux64',
        'proxy_servers': proxy_servers})

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

b_win_chromebot_server = {
  'name': 'Win Chromebot Server',
  'builddir': 'win-chromebot-server',
  'factory': f_win_chromebot_server,
  'auto_reboot': False,
}

b_win_chromebot_clients = []
for name in win_chromebot_client_names:
  b_win_chromebot_clients.append({
    'name': name,
    'builddir': name.replace(' ', '-').lower(),
    'factory': f_win_chromebot_client,
    'auto_reboot': True,
  })

b_linux_chromebot_server = {
  'name': 'Linux Chromebot Server',
  'builddir': 'linux-chromebot-server',
  'factory': f_linux_chromebot_server,
  'auto_reboot': False,
}

b_linux_chromebot_clients = []
for name in linux_chromebot_client_names:
  b_linux_chromebot_clients.append({
    'name': name,
    'builddir': name.replace(' ', '-').lower(),
    'factory': f_linux_chromebot_client,
    'auto_reboot': True,
  })

c['builders'] = ([b_win_chromebot_server] +
                 b_win_chromebot_clients +
                 [b_linux_chromebot_server] +
                 b_linux_chromebot_clients)

# Associate the slaves to the builders. The configuration is in slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumChromebot')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster, MAIL_NOTIFIER)

# Add more.

if PB_LISTENER:
  from buildbot.status import client
  c['status'].append(client.PBListener(9988))

# Local event push.
if STATUS_PUSH:
  from buildbot.status.status_push import HttpStatusPush
  # Hint: use a dummy web server to inspect the packets being sent.
  c['status'].append(HttpStatusPush('http://localhost:8000/status-listener'))


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://localhost:8010/'

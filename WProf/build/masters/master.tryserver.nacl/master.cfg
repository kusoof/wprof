# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# READ THIS:
# See http://dev.chromium.org/developers/testing/chromium-build-infrastructure

# These modules come from scripts, which must be in the PYTHONPATH.
from master import master_utils
from master import slaves_list
from master.builders_pools import BuildersPools
from master.factory import gyp_factory
from master.factory import nacl_factory
from master.factory import nacl_sdk_factory
from master.try_job_http import TryJobHTTP
from master.try_job_svn import TryJobSubversion

from buildbot.scheduler import Triggerable

import config

ActiveMaster = config.Master.NativeClientTryServer

MAIL_NOTIFIER = True
UPDATE_CODEREVIEW = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

c['change_source'] = [ ]

# Avoid merging requests.
c['mergeRequests'] = lambda _builder, _request1, _request2: False


####### BUILDERS

c['builders'] = []

# FACTORIES

m_win32 = {}
m_win64 = {}
m_mac = {}
m_linux = {}
m_arm = {}

m_win32['nacl'] = nacl_factory.NativeClientFactory(
    build_dir='native_client',
    target_platform='win32', use_supplement=True).NativeClientFactory
m_win64['nacl'] = nacl_factory.NativeClientFactory(
    build_dir='native_client',
    # Use win32 for win64 as various bbot parts assume this.
    target_platform='win32', use_supplement=True).NativeClientFactory
m_linux['nacl'] = nacl_factory.NativeClientFactory(
    build_dir='native_client',
    target_platform='linux2', use_supplement=True).NativeClientFactory
m_mac['nacl'] = nacl_factory.NativeClientFactory(
    build_dir='native_client',
    target_platform='darwin', use_supplement=True).NativeClientFactory
m_arm['nacl'] = nacl_factory.NativeClientFactory(
    build_dir='native_client',
    target_platform='arm', use_supplement=True).NativeClientFactory

for platform in [m_win32, m_win64, m_mac, m_linux, m_arm]:
  platform['nacl-toolchain'] = platform['nacl']

nacl_sdk_chromium = 'svn://svn.chromium.org/chrome/trunk/src'
m_win32['naclsdkm'] = nacl_sdk_factory.NativeClientSDKFactory(
    build_dir='src/native_client_sdk/src', target_platform='win32',
    alternate_url=nacl_sdk_chromium).NativeClientSDKFactory
m_win64['naclsdkm'] = nacl_sdk_factory.NativeClientSDKFactory(
    build_dir='src/native_client_sdk/src', target_platform='win32',
    alternate_url=nacl_sdk_chromium).NativeClientSDKFactory
m_linux['naclsdkm'] = nacl_sdk_factory.NativeClientSDKFactory(
    build_dir='src/native_client_sdk/src', target_platform='linux2',
    alternate_url=nacl_sdk_chromium).NativeClientSDKFactory
m_mac['naclsdkm'] = nacl_sdk_factory.NativeClientSDKFactory(
    build_dir='src/native_client_sdk/src', target_platform='darwin',
    alternate_url=nacl_sdk_chromium).NativeClientSDKFactory

m_win32['gyp'] = gyp_factory.GYPFactory(
    build_dir='trunk', target_platform='win32').GYPFactory
m_win64['gyp'] = gyp_factory.GYPFactory(
    # Use win32 for win64 as various bbot parts assume this.
    build_dir='trunk', target_platform='win32').GYPFactory
m_mac['gyp'] = gyp_factory.GYPFactory(
    build_dir='trunk', target_platform='darwin').GYPFactory
m_linux['gyp'] = gyp_factory.GYPFactory(
    build_dir='trunk', target_platform='linux2').GYPFactory


def CreateBot(platform, password=config.Master.GetBotPassword(),
              builder_name=None, target=None, project=None,
              tests=None, options=None, mode=None, timeout=1200,
              slave_names=None, factory_properties=None, slave_type='Trybot'):
  """Generates and register a builder along with its slave(s).

  Implicitly register slave_name or slave_names if they weren't registered yet.
  If none of slave_name or slave_names is supplied, a slave name will be
  constructed from the builder name.
  """
  if platform not in ('win32', 'win64', 'linux', 'mac', 'arm'):
    raise Exception(platform + ' is not an known os type')
  if not target:
    target = 'dbg'
  # Don't enable auto_reboot for people testing locally.
  auto_reboot = ActiveMaster.is_production_host
  if platform == 'win32':
    factory = m_win32[project]
  elif platform == 'win64':
    factory = m_win64[project]
  elif platform == 'linux':
    factory = m_linux[project]
  elif platform == 'mac':
    factory = m_mac[project]
  elif platform == 'arm':
    factory = m_arm[project]
    # Arm board slaves have issue rebooting continuously.
    if slave_type == 'Tester':
      auto_reboot = False
  if project in ['nacl', 'nacl-toolchain']:
    builder_factory = factory(
        slave_type=slave_type, tests=tests, options=options,
        factory_properties=factory_properties)
  elif project == 'naclsdkm':
    builder_factory = factory(
        slave_type=slave_type, target=target, tests=tests, options=options,
        mode=mode, compile_timeout=timeout, clobber=True,
        factory_properties=factory_properties, official_release=False)
  elif project == 'gyp':
    builder_factory = factory()
  else:
    assert False
  builder = {
    'name': builder_name,
    # TODO(maruel): remove
    'builddir': builder_name.replace(' ', '-'),
    'slavebuilddir': project,
    'factory': builder_factory,
    'auto_reboot': auto_reboot,
  }
  if slave_names:
    builder['slavenames'] = slave_names
  else:
    builder['slavename'] = builder_name.replace(' ', '-')
  c['builders'].append(builder)


# Try queues.
pools = BuildersPools('nacl')
number_slaves = 12
slaves = slaves_list.SlavesList('slaves.cfg', 'NativeClientTryServer')


# A index to slave name mapper.
def GetSlaveName(builder_names, index):
  s = []
  for b in builder_names:
    s += slaves.GetSlavesName(builder=b)
  # Fill up with dummy test slaves.
  s.extend(['try-%s-%d' % (builder_names[0], i)
            for i in range(1, number_slaves + 1 - len(s))])
  return s[index - 1]


projects = [
  {
    'name': 'nacl',
    'platforms': [
      {
        'name': 'lucid32_newlib_dbg',
        'core_platform': 'linux',
        'builder_names': ['lucid32'],
      },
      {
        'name': 'lucid32_newlib_opt',
        'core_platform': 'linux',
        'builder_names': ['lucid32'],
      },
      {
        'name': 'lucid32_glibc_opt',
        'core_platform': 'linux',
        'builder_names': ['lucid32'],
      },
      {
        'name': 'lucid64_newlib_dbg',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },
      {
        'name': 'lucid64_newlib_opt',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },
      {
        'name': 'lucid64_glibc_opt',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },
      {
        'name': 'lucid64_validator_opt',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },

      {
        'name': 'lucid_64-newlib-arm_qemu-pnacl',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },
      {
        'name': 'lucid_64-newlib-x86_32-pnacl',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },
      {
        'name': 'lucid_64-newlib-x86_64-pnacl',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },

      {
        'name': 'lucid_64-newlib-arm_qemu-pnacl-spec',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },
      {
        'name': 'lucid_64-newlib-x86_32-pnacl-spec',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },
      {
        'name': 'lucid_64-newlib-x86_64-pnacl-spec',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },

      {
        'name': 'lucid64_newlib_dbg_valgrind',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },
      {
        'name': 'lucid64_glibc_dbg_valgrind',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },
      {
        'name': 'mac10.6_newlib_opt',
        'core_platform': 'mac',
        'builder_names': ['mac10.6'],
      },
      {
        'name': 'mac10.6_glibc_opt',
        'core_platform': 'mac',
        'builder_names': ['mac10.6'],
      },
      {
        'name': 'mac10.7_newlib_opt',
        'core_platform': 'mac',
        'builder_names': ['mac10.7'],
      },
      {
        'name': 'mac10.7_glibc_opt',
        'core_platform': 'mac',
        'builder_names': ['mac10.7'],
      },
      {
        'name': 'win32_newlib_opt',
        'core_platform': 'win32',
        'builder_names': ['win32'],
      },
      {
        'name': 'win32_glibc_opt',
        'core_platform': 'win32',
        'builder_names': ['win32'],
      },
      {
        'name': 'win64_newlib_dbg',
        'core_platform': 'win64',
        'builder_names': ['win64'],
      },
      {
        'name': 'win64_newlib_opt',
        'core_platform': 'win64',
        'builder_names': ['win64'],
      },
      {
        'name': 'win64_glibc_opt',
        'core_platform': 'win64',
        'builder_names': ['win64'],
      },
      {
        'name': 'mac10.6-newlib-dbg-clang',
        'core_platform': 'mac',
        'builder_names': ['mac10.6'],
      },
      {
        'name': 'lucid_64-newlib-dbg-clang',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },
      {
        'name': 'arm_opt_panda',
        'core_platform': 'arm',
        'builder_names': ['lucid64'],
        # Needed for triggering to happen (for now).
        'tests': ['nacl_trigger_arm_hw_opt_panda'],
      },
      {
        'name': 'arm_perf_panda',
        'core_platform': 'arm',
        'builder_names': ['lucid64'],
        # Needed for triggering to happen (for now).
        'tests': ['nacl_trigger_arm_hw_perf_panda'],
      },
      {
        'name': 'arm_hw_opt_panda',
        'core_platform': 'arm',
        'slave_type': 'Tester',
        'builder_names': ['panda'],
        'factory_properties': {'update_scripts_gclient_jobs': 1},
      },
      {
        'name': 'arm_hw_perf_panda',
        'core_platform': 'arm',
        'slave_type': 'Tester',
        'builder_names': ['panda'],
        'factory_properties': {'update_scripts_gclient_jobs': 1},
      },
      # Coverage bots.
      {
        'name': 'mac10.6-newlib-coverage',
        'core_platform': 'mac',
        'builder_names': ['mac10.6'],
      },
      {
        'name': 'lucid-64-32-newlib-coverage',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },
      {
        'name': 'lucid-64-64-newlib-coverage',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },
      {
        'name': 'win32-newlib-coverage',
        'core_platform': 'win32',
        'builder_names': ['win32'],
      },
      # Special bare metal.
      {
        'name': 'xp-bare-shared',
        'core_platform': 'win32',
        'builder_names': ['bare_xp'],
      },
      {
        'name': 'win7-bare-shared',
        'core_platform': 'win64',
        'builder_names': ['bare_win7'],
      },
      {
        'name': 'lucid64-bare-shared',
        'core_platform': 'linux',
        'builder_names': ['bare_lucid64'],
      },
      {
        'name': 'mac-bare-shared',
        'core_platform': 'mac',
        'builder_names': ['bare_mac'],
      },
    ],
  },
  {
    'name': 'nacl-toolchain',
    'platforms': [
      {
        'name': 'lucid64-newlib',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },
      {
        'name': 'mac-newlib',
        'core_platform': 'mac',
        'builder_names': ['mac10.6'],
      },
      {
        'name': 'win7-newlib',
        'core_platform': 'win64',
        'builder_names': ['win64'],
      },

      {
        'name': 'lucid64-glibc',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },
      {
        'name': 'mac-glibc',
        'core_platform': 'mac',
        'builder_names': ['mac10.6'],
      },
      {
        'name': 'win7-glibc',
        'core_platform': 'win64',
        'builder_names': ['win64'],
      },

      {
        'name': 'mac-pnacl-x86_32',
        'core_platform': 'mac',
        'builder_names': ['mac10.6'],
      },
      {
        'name': 'linux-pnacl-x86_32',
        'core_platform': 'linux',
        'builder_names': ['lucid32'],
      },
      {
        'name': 'linux-pnacl-x86_64',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
      },
      {
        'name': 'win7-pnacl-x86_64',
        'core_platform': 'win64',
        'builder_names': ['win64'],
      },
    ],
  },
  {
    'name': 'naclsdkm',
    'platforms': [
      {
        'name': 'pnacl-linux',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
        'target': 'nacl_client_sdk',
      },
      {
        'name': 'linux',
        'core_platform': 'linux',
        'builder_names': ['lucid64'],
        'target': 'nacl_client_sdk',
      },
      {
        'name': 'mac',
        'core_platform': 'mac',
        'builder_names': ['mac10.6'],
        'target': 'native_client_sdk',
      },
      {
        'name': 'windows32',
        'core_platform': 'win32',
        'builder_names': ['win32'],
        'target': 'native_client_sdk',
      },
      {
        'name': 'windows64',
        'core_platform': 'win64',
        'builder_names': ['win64'],
        'target': 'native_client_sdk',
      },
    ],
  },
  {
    'name': 'gyp',
    'platforms': [
      {
        'name': 'linux',
        'builder_names': ['lucid64'],
      },
      {
        'name': 'mac',
        'builder_names': ['mac10.6'],
      },
      {
        'name': 'win32',
        'builder_names': ['win32'],
      },
      {
        'name': 'win64',
        'builder_names': ['win64'],
      },
    ],
  },
]

for project in projects:
  for platform in project['platforms']:
    true_builder_names = platform.get('builder_names', [platform['name']])
    slave_names = [GetSlaveName(true_builder_names, x)
                   for x in range(1, number_slaves + 1)]
    # This allows builders to pluck out particular slaves to use.
    # It is used for the arm cross-compile builds to prevent race conditions
    # by allowing only a single slave to write to a share archive URL.
    slave_names = platform.get('raw_slave_names', slave_names)
    name = project['name'] + '-' + platform['name']
    CreateBot(platform=platform.get('core_platform', platform['name']),
              target=platform.get('target', project.get('target')),
              tests=platform.get('tests', project.get('tests')),
              mode=platform.get('mode'),
              slave_type=platform.get('slave_type', 'Trybot'),
              options=platform.get('options', project.get('options')),
              factory_properties=platform.get(
                  'factory_properties', project.get('factory_properties')),
              slave_names=slave_names,
              project=project['name'],
              builder_name=name)
    pools[project['name']].append(name)



####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())


####### SCHEDULERS

# Configure the Schedulers;
# Main Tryscheduler for the try queue. groups is defined in the loop above.
c['schedulers'] = []

code_review_sites = {
  'nacl': config.Master.NativeClientTryServer.code_review_site,
  'nacl-toolchain': config.Master.NativeClientTryServer.code_review_site,
  'naclsdkm': config.Master.NativeClientTryServer.code_review_site,
  'gyp': config.Master.NativeClientTryServer.code_review_site,
}
c['schedulers'].append(TryJobHTTP(
    name='try_job_http',
    port=ActiveMaster.try_job_port,
    code_review_sites=code_review_sites,
    pools=pools))

if ActiveMaster.svn_url:
  c['schedulers'].append(TryJobSubversion(
      name='try_job_svn',
      svn_url=ActiveMaster.svn_url,
      code_review_sites=code_review_sites,
      pools=pools))

for mode in ['opt_panda', 'perf_panda']:
  s = Triggerable(
      name='arm_%s_hw_tests' % mode,
      builderNames=['nacl-arm_hw_%s' % mode])
  c['schedulers'].append(s)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster, False,
                             public_html='../master.chromium/public_html',
                             templates=['../master.client.nacl/templates'])

# Add more.

if MAIL_NOTIFIER:
  # Add a dumb MailNotifier first so it will be used for BuildSlave with
  # notify_on_missing set when they go missing.
  from buildbot.status import mail
  c['status'].append(mail.MailNotifier(
      fromaddr=ActiveMaster.from_address,
      builders=[],
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails()))

  # Try job result emails.
  from master.try_mail_notifier import TryMailNotifier
  c['status'].append(TryMailNotifier(
      fromaddr=ActiveMaster.from_address,
      subject="try of %(reason)s @ r%(revision)s %(timestamp)s",
      mode='all',
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails()))

if UPDATE_CODEREVIEW:
  from master.status_push import TryServerHttpStatusPush
  c['status'].append(
      TryServerHttpStatusPush(serverUrl=ActiveMaster.code_review_site))


# Keep last try jobs, the default is too low. Must keep at least a few days
# worth of try jobs.
c['buildHorizon'] = 2000
c['logHorizon'] = 2000
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 100
# Must be at least 2x the number of on-going builds.
c['buildCacheSize'] = 100


####### PROJECT IDENTITY

# The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.
c['projectURL'] = 'http://go/ChromeTryServer'

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/tryserver.nacl/'

# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'v8' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

from buildbot.changes import svnpoller
from buildbot.scheduler import Dependent
from buildbot.scheduler import Nightly
from buildbot.scheduler import Scheduler
from buildbot.scheduler import AnyBranchScheduler
from buildbot.scheduler import Triggerable

#from master import build_utils
from master import master_utils
from master import slaves_list
from master.factory import v8_factory
from master.factory import chromium_factory

import config
import branches_cfg

# Get the branches currently tracked on the waterfall, plus the names for the
# slaves on these branches from the branches_cfg.py file.
stable_branch = branches_cfg.stable_branch
beta_branch = branches_cfg.beta_branch
dev_branch = branches_cfg.dev_branch
branch_names = branches_cfg.branch_names

ActiveMaster = config.Master.V8

SVN_POLLER = True

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### DATABASE

import os
if os.path.isfile('.dbconfig'):
  values = {}
  execfile('.dbconfig', values)
  if 'password' not in values:
    raise Exception('could not get db password')

  c['db_url'] = 'postgresql://%s:%s@%s/%s' % (
      values['username'], values['password'],
      values.get('hostname', 'localhost'), values['dbname'])


####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def V8TreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  pieces = path.split('/')
  if pieces[0] == 'trunk':
    return ('trunk', '/'.join(pieces[1:]))
  elif pieces[0] == 'branches':
    return ('/'.join(pieces[0:2]),
            '/'.join(pieces[2:]))
  else:
    return None

if SVN_POLLER:
  # Polls config.Master.trunk_url for changes
  # config.Master.trunk_url,
  v8_rev = 'http://code.google.com/p/v8/source/detail?r=%s'
  bleeding_poller = svnpoller.SVNPoller(
      svnurl=config.Master.v8_url,
      split_file=V8TreeFileSplitter,
      pollinterval=10,
      revlinktmpl=v8_rev)

  c['change_source'] = [bleeding_poller]


####### SCHEDULERS

## configure the Schedulers
# v8 Scheduler
s_v8 = Scheduler(name='v8_src',
                 branch='branches/bleeding_edge',
                 treeStableTimer=60,
                 builderNames=['V8 Linux',
                               'V8 Linux - debug',
                               'V8 Linux - debug - mozilla',
                               'V8 Linux - debug - test262',
                               'V8 Linux - shared',
                               'V8 Linux64',
                               'V8 Linux64 - debug',
                               'V8 Linux64 - debug - mozilla',
                               'V8 Linux64 - debug - test262',
                               'V8 Linux - nosnap',
                               'V8 Linux - nosnap - debug',
                               'V8 Linux - nosnap - debug - mozilla',
                               'V8 Linux - nosnap - debug - test262',
                               'V8 Linux - isolates',
                               'V8 Linux - nosse2',
                               'V8 Linux - nosse3',
                               'V8 Linux - nosse4',
                               'V8 Win32',
                               'V8 Win32 - mozilla',
                               'V8 Win32 - test262',
                               'V8 Win32 - debug - 1',
                               'V8 Win32 - debug - 2',
                               'V8 Win32 - debug - mozilla - 1',
                               'V8 Win32 - debug - mozilla - 2',
                               'V8 Win32 - debug - test262 - 1',
                               'V8 Win32 - debug - test262 - 2',
                               'V8 Win64',
                               'V8 Mac',
                               'V8 Mac - debug',
                               'V8 Mac - debug - mozilla',
                               'V8 Linux - arm - sim',
                               'V8 Linux - arm - sim - mozilla',
                               'V8 Linux - arm - sim - debug',
                               'V8 Linux - arm - sim - debug - mozilla - 1',
                               'V8 Linux - arm - sim - debug - mozilla - 2',
                               'V8 Linux - arm - sim - debug - test262',
                               'V8 Linux - arm - sim - novfp3',
                               'V8 Linux - mips - sim',
                               'Win7 Perf',
                               'Mac10.6 Perf',
                               'Linux Interactive (dbg)',
                               'Webkit',
                               'Webkit Mac',
                               'Webkit Linux',
                               'Webkit Linux 64'])


s_v8_trunk = Scheduler(name='v8_trunk',
                       branch='trunk',
                       treeStableTimer=60,
                       builderNames=['V8 Linux - trunk',
                                     'V8 arm - sim - trunk',
                                     'V8 Linux64 - trunk'])

s_v8_stable = Scheduler(name='v8_stable',
                        branch='branches/' + stable_branch,
                        treeStableTimer=60,
                        builderNames=[branch_names['stable']['ia32'],
                                      branch_names['stable']['x64'],
                                      branch_names['stable']['arm']])

s_v8_beta = Scheduler(name='v8_beta',
                      branch='branches/' + beta_branch,
                      treeStableTimer=60,
                      builderNames=[branch_names['beta']['ia32'],
                                    branch_names['beta']['x64'],
                                    branch_names['beta']['arm']])

s_v8_dev = Scheduler(name='v8_dev',
                     branch='branches/' + dev_branch,
                     treeStableTimer=60,
                     builderNames=[branch_names['dev']['ia32'],
                                   branch_names['dev']['x64'],
                                   branch_names['dev']['arm']])

# Scheduler to trigger slaves that depend on the release build.
s_v8_arm_builder = Scheduler(name='v8_arm_builder',
                             branch='branches/bleeding_edge',
                             treeStableTimer=60,
                             builderNames=['V8 Arm - builder'])

s_v8_arm_dependent = Dependent('v8_arm_dependent',
                               s_v8_arm_builder,
                               ['V8 Arm - tester'])


# These builders run daily.
s_v8_daily = Nightly(name='v8_thrice_daily',
                     branch=None,
                     builderNames=['V8 Fuzzer',
                                   'Webkit Mac - dbg',
                                   'Webkit Linux - dbg',
                                   'Chrome Browser Tests',
                                   'Chrome Browser Tests - dbg'],
                     hour=[19],
                     minute=30)

c['schedulers'] = [s_v8, s_v8_daily, s_v8_arm_builder, s_v8_arm_dependent,
                   s_v8_trunk, s_v8_stable,
                   s_v8_beta, s_v8_dev]


# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_linux = v8_factory.V8Factory('v8', target_platform='linux2',
                               sputnik_revision='97')

m_linux_stable = v8_factory.V8Factory('v8', target_platform='linux2',
                                             branch='branches/' + stable_branch,
                                             sputnik_revision='97')

m_linux_beta = v8_factory.V8Factory('v8', target_platform='linux2',
                                           branch='branches/' + beta_branch,
                                           sputnik_revision='97')

m_linux_dev = v8_factory.V8Factory('v8', target_platform='linux2',
                                          branch='branches/' + dev_branch,
                                          sputnik_revision='97')

m_linux_trunk = v8_factory.V8Factory('v8', target_platform='linux2',
                                     branch='trunk',
                                     sputnik_revision='97')

m_linux64_stable = v8_factory.V8Factory('v8', target_platform='linux64',
                                        branch='branches/' + stable_branch,
                                        sputnik_revision='97')

m_linux64_beta = v8_factory.V8Factory('v8', target_platform='linux64',
                                      branch='branches/' + beta_branch,
                                      sputnik_revision='97')

m_linux64_dev = v8_factory.V8Factory('v8', target_platform='linux64',
                                     branch='branches/' + dev_branch,
                                     sputnik_revision='97')

m_linux64_trunk = v8_factory.V8Factory('v8', target_platform='linux64',
                                       branch='trunk',
                                       sputnik_revision='97')

m_linux64 = v8_factory.V8Factory('v8', target_platform='linux64',
                                 sputnik_revision='97')

m_win32 = v8_factory.V8Factory('v8', target_platform='win32',
                               sputnik_revision='97')

m_mac = v8_factory.V8Factory('v8', target_platform='darwin',
                             sputnik_revision='97')

# Note target platform is still win32 - because this is how it is done in scons.
# This is intentionally left as a seperate builder in case this changes.
m_win64 = v8_factory.V8Factory('v8', target_platform='win32',
                               sputnik_revision='97')

v8_arm_builder_archive = ('http://%s/'
                         'v8-arm-builder/chrome_staging/'
                         'full-build-linux.zip' %
                         'vm54-m3')


crosstool_prefix = (
  '/home/chrome-bot/CodeSourcery/Sourcery_G++_Lite/bin/arm-none-linux-gnueabi')


F = chromium_factory.ChromiumFactory
def win(): return F('src/build', 'win32')
def win_webkit(): return F('src/build', 'win32')
def mac(): return F('src/build', 'darwin')
def linux(): return F('src/build', 'linux2')

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

linux_default_opts = ['buildbot', '--build-tool=make']

f_v8_linux = m_linux.V8Factory(
    options=linux_default_opts,
    target='Release',  # Release is also the default, but let's be explicit.
    tests=['v8testing', 'v8initializers', 'test262', 'mozilla', 'presubmit'],
    target_arch='ia32')


f_v8_linux_shared = m_linux.V8Factory(
    options=linux_default_opts,
    target='Release',
    factory_properties={
      'gclient_env': {'GYP_DEFINES': 'component=shared_library'},
    },
    tests=['v8testing', 'test262', 'mozilla'],
    target_arch='ia32')


f_v8_linux_debug = m_linux.V8Factory(
    options=linux_default_opts,
    target='Debug',
    tests=['v8testing'],
    target_arch='ia32')

f_v8_linux_debug_mozilla = m_linux.V8Factory(
    options=linux_default_opts,
    target='Debug',
    tests=['mozilla'],
    target_arch='ia32')

f_v8_linux_debug_test262 = m_linux.V8Factory(
    options=linux_default_opts,
    target='Debug',
    tests=['test262'],
    target_arch='ia32')

f_v8_linux64 = m_linux64.V8Factory(
    options=linux_default_opts,
    target='Release',
    tests=['v8testing', 'test262', 'mozilla'],
    target_arch='x64')

f_v8_linux64_debug = m_linux64.V8Factory(
    options=linux_default_opts,
    target='Debug',
    tests=['v8testing'],
    target_arch='x64')

f_v8_linux64_debug_mozilla = m_linux64.V8Factory(
    options=linux_default_opts,
    target='Debug',
    tests=['mozilla'],
    target_arch='x64')

f_v8_linux64_debug_test262 = m_linux64.V8Factory(
    options=linux_default_opts,
    target='Debug',
    tests=['test262'],
    target_arch='x64')

f_v8_linux_nosnap = m_linux.V8Factory(
    options=linux_default_opts,
    target='Release',
    factory_properties={
      'gclient_env': {'GYP_DEFINES': 'v8_use_snapshot=false'},
    },
    tests=['v8testing', 'test262', 'mozilla'],
    target_arch='ia32')

f_v8_linux_nosnap_debug = m_linux.V8Factory(
    options=linux_default_opts,
    target='Debug',
    factory_properties={
      'gclient_env': {'GYP_DEFINES': 'v8_use_snapshot=false'},
    },
    tests=['v8testing'],
    target_arch='ia32')

f_v8_linux_nosnap_debug_mozilla = m_linux.V8Factory(
    options=linux_default_opts,
    target='Debug',
    factory_properties={
      'gclient_env': {'GYP_DEFINES': 'v8_use_snapshot=false'},
    },
    tests=['mozilla'],
    target_arch='ia32')

f_v8_linux_nosnap_debug_test262 = m_linux.V8Factory(
    options=linux_default_opts,
    target='Debug',
    factory_properties={
      'gclient_env': {'GYP_DEFINES': 'v8_use_snapshot=false'},
    },
    tests=['test262'],
    target_arch='ia32')

f_v8_linux_arm_sim = m_linux.V8Factory(
    options=linux_default_opts,
    target='Release',
    tests=['v8testing', 'test262'],
    target_arch='arm')

f_v8_linux_arm_sim_mozilla = m_linux.V8Factory(
    options=linux_default_opts,
    target='Release',
    tests=['mozilla'],
    target_arch='arm')

f_v8_linux_arm_sim_debug = m_linux.V8Factory(
    options=linux_default_opts,
    target='Debug',
    tests=['v8testing'],
    target_arch='arm')

f_v8_linux_arm_sim_debug_mozilla = m_linux.V8Factory(
    options=linux_default_opts,
    target='Debug',
    tests=['mozilla'],
    target_arch='arm')

f_v8_linux_arm_sim_debug_mozilla_1 = m_linux.V8Factory(
    options=linux_default_opts,
    target='Debug',
    tests=['mozilla'],
    target_arch='arm',
    shard_count=2,
    shard_run=1)

f_v8_linux_arm_sim_debug_mozilla_2 = m_linux.V8Factory(
    options=linux_default_opts,
    target='Debug',
    tests=['mozilla'],
    target_arch='arm',
    shard_count=2,
    shard_run=2)

f_v8_linux_arm_sim_debug_test262 = m_linux.V8Factory(
    options=linux_default_opts,
    target='Debug',
    tests=['test262'],
    target_arch='arm')

f_v8_linux_arm_sim_novfp3 = m_linux.V8Factory(
    options=linux_default_opts,
    factory_properties={
      'gclient_env': {'GYP_DEFINES': 'v8_can_use_vfp_instructions=false'},
    },
    shell_flags='@ --noenable-vfp3',
    tests=['v8testing', 'test262', 'mozilla'],
    target='Release,Debug',
    target_arch='arm')

f_v8_linux_mips_sim = m_linux.V8Factory(
    options=linux_default_opts,
    target='Release',
    tests=['v8testing', 'test262'],
    target_arch='mips')

win_default_opts=['--build-tool=vs']

f_v8_win32 = m_win32.V8Factory(
    options=win_default_opts,
    project='build\\all.sln',
    target='Release',
    tests=['v8testing'],
    target_arch='ia32')

f_v8_win32_mozilla = m_win32.V8Factory(
    options=win_default_opts,
    project='build\\all.sln',
    target='Release',
    tests=['mozilla'],
    target_arch='ia32')

f_v8_win32_test262 = m_win32.V8Factory(
    options=win_default_opts,
    project='build\\all.sln',
    target='Release',
    tests=['test262'],
    target_arch='ia32')

f_v8_win32_debug_1 = m_win32.V8Factory(
    options=win_default_opts,
    project='build\\all.sln',
    target='Debug',
    tests=['v8testing'],
    target_arch='ia32',
    shard_count=2,
    shard_run=1)

f_v8_win32_debug_2 = m_win32.V8Factory(
    options=win_default_opts,
    project='build\\all.sln',
    target='Debug',
    tests=['v8testing'],
    target_arch='ia32',
    shard_count=2,
    shard_run=2)

f_v8_win32_debug_mozilla_1 = m_win32.V8Factory(
    options=win_default_opts,
    project='build\\all.sln',
    target='Debug',
    tests=['mozilla'],
    target_arch='ia32',
    shard_count=2,
    shard_run=1)

f_v8_win32_debug_mozilla_2 = m_win32.V8Factory(
    options=win_default_opts,
    project='build\\all.sln',
    target='Debug',
    tests=['mozilla'],
    target_arch='ia32',
    shard_count=2,
    shard_run=2)

f_v8_win32_debug_test262_1 = m_win32.V8Factory(
    options=win_default_opts,
    project='build\\all.sln',
    target='Debug',
    tests=['test262'],
    target_arch='ia32',
    shard_count=2,
    shard_run=1)

f_v8_win32_debug_test262_2 = m_win32.V8Factory(
    options=win_default_opts,
    project='build\\all.sln',
    target='Debug',
    tests=['test262'],
    target_arch='ia32',
    shard_count=2,
    shard_run=2)

f_v8_win64 = m_win64.V8Factory(
    options=win_default_opts,
    project='build\\all.sln',
    target='Release',
    tests=['v8testing', 'test262', 'mozilla'],
    target_arch='x64')

mac_default_opts=['--solution=build/all.xcodeproj',
                  '--build-tool=xcode']

f_v8_mac = m_mac.V8Factory(
    options=mac_default_opts,
    target='Release',
    tests=['v8testing', 'test262', 'mozilla'],
    target_arch='ia32')

f_v8_mac_debug = m_mac.V8Factory(
    options=mac_default_opts,
    target='Debug',
    tests=['v8testing', 'test262'],
    target_arch='ia32')

f_v8_mac_debug_mozilla = m_mac.V8Factory(
    options=mac_default_opts,
    target='Debug',
    tests=['mozilla'],
    target_arch='ia32')


f_v8_linux_isolates = m_linux.V8Factory(
    options=linux_default_opts,
    target='Debug,Release',
    isolates=True,
    tests=['v8testing'],
    target_arch='ia32')

f_v8_linux_nosse2 = m_linux.V8Factory(
    options=linux_default_opts,
    target='Debug,Release',
    shell_flags='@ --noenable-sse2',
    tests=['v8testing', 'test262', 'mozilla', 'gcmole'],
    target_arch='ia32')

f_v8_linux_nosse3 = m_linux.V8Factory(
    options=linux_default_opts,
    target='Debug,Release',
    shell_flags='@ --noenable-sse3',
    tests=['v8testing', 'test262', 'mozilla'],
    target_arch='ia32')

f_v8_linux_nosse4 = m_linux.V8Factory(
    options=linux_default_opts,
    target='Debug,Release',
    shell_flags='@ --noenable-sse4-1',
    tests=['v8testing', 'test262', 'mozilla'],
    target_arch='ia32')

f_v8_fuzz = m_linux.V8Factory(
    options=linux_default_opts,
    target='Release',
    tests=['fuzz'],
    target_arch='ia32')

f_chromium_rel_perf_win7_dual_v8 = win().ChromiumV8LatestFactory(
    project='all.sln;chromium_builder',
    tests=['page_cycler_moz', 'page_cycler_morejs', 'page_cycler_intl1',
           'page_cycler_intl2', 'page_cycler_dhtml', 'page_cycler_database',
           'page_cycler_indexeddb', 'startup', 'dom_perf', 'memory',
           'sunspider', 'v8_benchmark', 'dromaeo'],
    compile_timeout=7200,
    factory_properties={'perf_id': 'chromium-rel-win7-dual-v8',
                        'gclient_env': {'GYP_DEFINES': 'fastbuild=1'},
                        'show_perf_results': True,
                        'primary_repo': 'v8_'})

f_chromium_dbg_linux_interactive_v8 = linux().ChromiumV8LatestFactory(
    tests=['interactive_ui'],
    options=['interactive_ui_tests'],
    factory_properties={'primary_repo': 'v8_'})

f_chromium_rel_mac6_perf_v8 = mac().ChromiumV8LatestFactory(
    tests=['page_cycler_moz', 'page_cycler_morejs', 'page_cycler_intl1',
           'page_cycler_intl2', 'page_cycler_dhtml', 'page_cycler_database',
           'page_cycler_indexeddb', 'startup', 'dom_perf',
           'page_cycler_moz-http', 'page_cycler_bloat-http', 'tab_switching',
           'sunspider', 'v8_benchmark', 'dromaeo', 'memory'],
    options=['--compiler=clang', '--', '-target', 'chromium_builder_perf'],
    factory_properties={
        'perf_id': 'chromium-rel-mac6-v8',
        'show_perf_results': True,
        'primary_repo': 'v8_',
        'gclient_env': {
            'GYP_DEFINES':'clang=1 clang_use_chrome_plugins=0'
         }
    })

f_webkit_rel_v8 = win_webkit().ChromiumV8LatestFactory(
    tests=['test_shell', 'webkit', 'webkit_unit'],
    project='all.sln;webkit_builder_win',
    compile_timeout=3600,
    factory_properties={'archive_webkit_results': False,
                        'primary_repo': 'v8_'})

f_webkit_rel_mac_v8 = mac().ChromiumV8LatestFactory(
    tests=['test_shell', 'webkit', 'webkit_unit'],
    factory_properties={
        'archive_webkit_results': False,
        'primary_repo': 'v8_',
        'gclient_env': {
            'GYP_DEFINES':'clang=1 clang_use_chrome_plugins=0'
        }
    },
    options=['--compiler=clang', '--', '-project',
             '../webkit/webkit.xcodeproj'])

f_webkit_dbg_mac_v8 = mac().ChromiumV8LatestFactory(
    tests=['test_shell', 'webkit', 'webkit_unit'],
    target='Debug',
    factory_properties={
        'archive_webkit_results': False,
        'primary_repo': 'v8_',
        'gclient_env': {
            'GYP_DEFINES':'clang=0 clang_use_chrome_plugins=0'
        }
    },
    options= ['--', '-project',
              '../webkit/webkit.xcodeproj'])

f_webkit_rel_linux_v8 = linux().ChromiumV8LatestFactory(
    tests=['test_shell', 'webkit', 'webkit_unit'],
    options=['--build-tool=make', 'test_shell', 'test_shell_tests',
             'webkit_unit_tests', 'DumpRenderTree'],
    factory_properties={'archive_webkit_results': False,
                        'primary_repo': 'v8_',
                        'gclient_env': {'GYP_GENERATORS' : 'make'}})

f_webkit_dbg_linux_v8 = linux().ChromiumV8LatestFactory(
    target='Debug',
    tests=['test_shell', 'webkit', 'webkit_unit'],
    options=['--build-tool=make', 'test_shell', 'test_shell_tests',
             'webkit_unit_tests', 'DumpRenderTree'],
    factory_properties={'archive_webkit_results': False,
                        'primary_repo': 'v8_',
                        'gclient_env': {'GYP_GENERATORS' : 'make'}})

f_webkit_rel_linux64_v8 = linux().ChromiumV8LatestFactory(
    tests=['test_shell', 'webkit', 'webkit_unit'],
    options=['--build-tool=make', 'test_shell', 'test_shell_tests',
             'webkit_unit_tests', 'DumpRenderTree'],
    factory_properties={'archive_webkit_results': False,
                        'primary_repo': 'v8_',
                        'gclient_env': {'GYP_GENERATORS' : 'make'}})

f_v8_arm_builder = m_linux.V8Factory(
    target='Release',
    tests=[],
    compile_timeout=3600,
    options=linux_default_opts + ['--crosstool', crosstool_prefix],
    factory_properties={
      'archive_build': True,
      'gclient_env': {
        'CXX': '%s-g++' % crosstool_prefix,
        'LINK': '%s-g++' % crosstool_prefix,
      }
    },
    target_arch='arm')

f_v8_arm_tester = m_linux.V8Factory(
    build_url=v8_arm_builder_archive,
    target='Release',
    slave_type='Tester',
    options=[],
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'],
    target_arch='arm')

f_v8_linux_trunk = m_linux_trunk.V8Factory(
    options=linux_default_opts,
    target='Release,Debug',
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla', 'presubmit'],
    target_arch='ia32')

f_v8_linux_stable = m_linux_stable.V8Factory(
    options=linux_default_opts,
    target='Release,Debug',
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'],
    target_arch='ia32')

f_v8_linux_beta = m_linux_beta.V8Factory(
    options=linux_default_opts,
    target='Release,Debug',
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'],
    target_arch='ia32')

f_v8_linux_dev = m_linux_dev.V8Factory(
    options=linux_default_opts,
    target='Release,Debug',
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla', 'presubmit'],
    target_arch='ia32')


f_v8_linux64_trunk = m_linux64_trunk.V8Factory(
    options=linux_default_opts,
    target='Release,Debug',
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla', 'presubmit'],
    target_arch='x64')

f_v8_linux64_stable = m_linux64_stable.V8Factory(
    options=linux_default_opts,
    target='Release,Debug',
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'],
    target_arch='x64')

f_v8_linux64_beta = m_linux64_beta.V8Factory(
    options=linux_default_opts,
    target='Release,Debug',
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'],
    target_arch='x64')

f_v8_linux64_dev = m_linux64_dev.V8Factory(
    options=linux_default_opts,
    target='Release,Debug',
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla', 'presubmit'],
    target_arch='x64')


f_v8_arm_trunk = m_linux_trunk.V8Factory(
    options=linux_default_opts,
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'],
    target='Release,Debug',
    target_arch='arm')

f_v8_arm_stable = m_linux_stable.V8Factory(
    options=linux_default_opts,
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'],
    target='Release,Debug',
    target_arch='arm')

f_v8_arm_beta = m_linux_beta.V8Factory(
    options=linux_default_opts,
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'],
    target='Release,Debug',
    target_arch='arm')

f_v8_arm_dev = m_linux_dev.V8Factory(
    options=linux_default_opts,
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'],
    target='Release,Debug',
    target_arch='arm')


f_browser_tests =  linux().ChromiumV8LatestFactory(
    tests=['check_deps',
           'googleurl',
           'media',
           'printing',
           'remoting',
           'browser_tests',
           'unit',
           'gpu',
           'base',
           'net',
           'safe_browsing',
           'crypto',
           'cacheinvalidation',
           'jingle'],
    factory_properties={'generate_gtest_json': True,
                        'primary_repo': 'v8_'})


f_browser_tests_debug =  linux().ChromiumV8LatestFactory(
    target='Debug',
    tests=['check_deps',
           'googleurl',
           'media',
           'printing',
           'remoting',
           'browser_tests',
           'unit',
           'gpu',
           'base',
           'net',
           'safe_browsing',
           'crypto',
           'cacheinvalidation',
           'jingle'],
    factory_properties={'generate_gtest_json': True,
                        'primary_repo': 'v8_'})


# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#


b_v8_linux = {
  'name': 'V8 Linux',
  'builddir': 'v8-linux',
  'factory': f_v8_linux,
  'category': '1Linux'
}

b_v8_linux_debug = {
  'name': 'V8 Linux - debug',
  'builddir': 'v8-linux-debug',
  'factory': f_v8_linux_debug,
  'category': '1Linux'
}

b_v8_linux_debug_mozilla = {
  'name': 'V8 Linux - debug - mozilla',
  'builddir': 'v8-linux-debug-mozilla',
  'factory': f_v8_linux_debug_mozilla,
  'category': '1Linux'
}

b_v8_linux_debug_test262 = {
  'name': 'V8 Linux - debug - test262',
  'builddir': 'v8-linux-debug-test262',
  'factory': f_v8_linux_debug_test262,
  'category': '1Linux'
}

b_v8_linux_shared = {
  'name': 'V8 Linux - shared',
  'builddir': 'v8-linux-shared',
  'factory': f_v8_linux_shared,
  'category': '1Linux'
}

b_v8_linux64 = {
  'name': 'V8 Linux64',
  'builddir': 'v8-linux64',
  'factory': f_v8_linux64,
  'category': '2Linux64'
}

b_v8_linux64_debug = {
  'name': 'V8 Linux64 - debug',
  'builddir': 'v8-linux64-debug',
  'factory': f_v8_linux64_debug,
  'category': '2Linux64'
}

b_v8_linux64_debug_mozilla = {
  'name': 'V8 Linux64 - debug - mozilla',
  'builddir': 'v8-linux64-debug-mozilla',
  'factory': f_v8_linux64_debug_mozilla,
  'category': '2Linux64'
}

b_v8_linux64_debug_test262 = {
  'name': 'V8 Linux64 - debug - test262',
  'builddir': 'v8-linux64-debug-test262',
  'factory': f_v8_linux64_debug_test262,
  'category': '2Linux64'
}

b_v8_linux_nosnap = {
  'name': 'V8 Linux - nosnap',
  'builddir': 'v8-linux-nosnap',
  'factory': f_v8_linux_nosnap,
  'category': '1Linux'
}

b_v8_linux_nosnap_debug = {
  'name': 'V8 Linux - nosnap - debug',
  'builddir': 'v8-linux-nosnap-debug',
  'factory': f_v8_linux_nosnap_debug,
  'category': '1Linux'
}

b_v8_linux_nosnap_debug_mozilla = {
  'name': 'V8 Linux - nosnap - debug - mozilla',
  'builddir': 'v8-linux-nosnap-debug-mozilla',
  'factory': f_v8_linux_nosnap_debug_mozilla,
  'category': '1Linux'
}

b_v8_linux_nosnap_debug_test262 = {
  'name': 'V8 Linux - nosnap - debug - test262',
  'builddir': 'v8-linux-nosnap-debug-test262',
  'factory': f_v8_linux_nosnap_debug_test262,
  'category': '1Linux'
}

b_v8_linux_arm_sim = {
  'name': 'V8 Linux - arm - sim',
  'builddir': 'v8-linux-arm-sim',
  'factory': f_v8_linux_arm_sim,
  'category': '7Simulators'
}

b_v8_linux_arm_sim_mozilla = {
  'name': 'V8 Linux - arm - sim - mozilla',
  'builddir': 'v8-linux-arm-sim-mozilla',
  'factory': f_v8_linux_arm_sim_mozilla,
  'category': '7Simulators'
}

b_v8_linux_arm_sim_debug = {
  'name': 'V8 Linux - arm - sim - debug',
  'builddir': 'v8-linux-arm-sim-debug',
  'factory': f_v8_linux_arm_sim_debug,
  'category': '7Simulators'
}

b_v8_linux_arm_sim_debug_mozilla_1 = {
  'name': 'V8 Linux - arm - sim - debug - mozilla - 1',
  'builddir': 'v8-linux-arm-sim-debug-mozilla-1',
  'factory': f_v8_linux_arm_sim_debug_mozilla_1,
  'category': '7Simulators'
}

b_v8_linux_arm_sim_debug_mozilla_2 = {
  'name': 'V8 Linux - arm - sim - debug - mozilla - 2',
  'builddir': 'v8-linux-arm-sim-debug-mozilla-2',
  'factory': f_v8_linux_arm_sim_debug_mozilla_2,
  'category': '7Simulators'
}

b_v8_linux_arm_sim_debug_test262 = {
  'name': 'V8 Linux - arm - sim - debug - test262',
  'builddir': 'v8-linux-arm-sim-debug-test262',
  'factory': f_v8_linux_arm_sim_debug_test262,
  'category': '7Simulators'
}

b_v8_linux_arm_sim_novfp3 = {
  'name': 'V8 Linux - arm - sim - novfp3',
  'builddir': 'v8-linux-arm-sim-novfp3',
  'factory': f_v8_linux_arm_sim_novfp3,
  'category': '7Simulators'
}

b_v8_linux_mips_sim = {
  'name': 'V8 Linux - mips - sim',
  'builddir': 'v8-linux-mips-sim',
  'factory': f_v8_linux_mips_sim,
  'category': '7Simulators'
}

b_v8_win32 = {
  'name': 'V8 Win32',
  'builddir': 'v8-win32',
  'factory': f_v8_win32,
  'category': '3Windows'
}

b_v8_win32_mozilla = {
  'name': 'V8 Win32 - mozilla',
  'builddir': 'win32-mozilla',
  'factory': f_v8_win32_mozilla,
  'category': '3Windows'
}

b_v8_win32_test262 = {
  'name': 'V8 Win32 - test262',
  'builddir': 'win32-test262',
  'factory': f_v8_win32_test262,
  'category': '3Windows'
}

# Non standard builddir because of path length limit (sputnik tests)
# for all win32 debug slaves.
b_v8_win32_debug_1 = {
  'name': 'V8 Win32 - debug - 1',
  'builddir': 'win-dbg1',
  'factory': f_v8_win32_debug_1,
  'category': '3Windows'
}

b_v8_win32_debug_2 = {
  'name': 'V8 Win32 - debug - 2',
  'builddir': 'win-dbg2',
  'factory': f_v8_win32_debug_2,
  'category': '3Windows'
}

b_v8_win32_debug_mozilla_1 = {
  'name': 'V8 Win32 - debug - mozilla - 1',
  'builddir': 'w32-d-moz1',
  'factory': f_v8_win32_debug_mozilla_1,
  'category': '3Windows'
}

b_v8_win32_debug_mozilla_2 = {
  'name': 'V8 Win32 - debug - mozilla - 2',
  'builddir': 'w32-d-moz2',
  'factory': f_v8_win32_debug_mozilla_2,
  'category': '3Windows'
}

b_v8_win32_debug_test262_1 = {
  'name': 'V8 Win32 - debug - test262 - 1',
  'builddir': 'w32-d-t2621',
  'factory': f_v8_win32_debug_test262_1,
  'category': '3Windows'
}

b_v8_win32_debug_test262_2 = {
  'name': 'V8 Win32 - debug - test262 - 2',
  'builddir': 'w32-d-t2622',
  'factory': f_v8_win32_debug_test262_2,
  'category': '3Windows'
}

b_v8_mac = {
  'name': 'V8 Mac',
  'builddir': 'v8-mac',
  'factory': f_v8_mac,
  'category': '4Mac'
}

b_v8_mac_debug = {
  'name': 'V8 Mac - debug',
  'builddir': 'v8-mac-debug',
  'factory': f_v8_mac_debug,
  'category': '4Mac'
}

b_v8_mac_debug_mozilla = {
  'name': 'V8 Mac - debug - mozilla',
  'builddir': 'v8-mac-debug-mozilla',
  'factory': f_v8_mac_debug_mozilla,
  'category': '4Mac'
}

b_v8_win64 = {
  'name': 'V8 Win64',
  'builddir': 'v8-win64',
  'factory': f_v8_win64,
  'category': '3Windows'
}

b_v8_linux_isolates = {
  'name': 'V8 Linux - isolates',
  'builddir': 'v8-linux-isolates',
  'factory': f_v8_linux_isolates,
  'category': '1Linux'
}

b_v8_linux_nosse2 = {
  'name': 'V8 Linux - nosse2',
  'builddir': 'v8-linux-nosse2',
  'factory': f_v8_linux_nosse2,
  'category': '1Linux'
}

b_v8_linux_nosse3 = {
  'name': 'V8 Linux - nosse3',
  'builddir': 'v8-linux-nosse3',
  'factory': f_v8_linux_nosse3,
  'category': '1Linux'
}

b_v8_linux_nosse4 = {
  'name': 'V8 Linux - nosse4',
  'builddir': 'v8-linux-nosse4',
  'factory': f_v8_linux_nosse4,
  'category': '1Linux'
}

b_v8_fuzz = {
  'name': 'V8 Fuzzer',
  'builddir': 'v8-fuzz',
  'factory': f_v8_fuzz,
  'category': '90Misc'
}

b_chromium_rel_win7_perf_dual_v8 = {
  'name': 'Win7 Perf',
  'builddir': 'chromium-rel-win7-perf-dual-v8',
  'factory': f_chromium_rel_perf_win7_dual_v8,
  'category': '90Misc'
}

b_chromium_dbg_linux_interactive_v8 = {
  'name': 'Linux Interactive (dbg)',
  'builddir': 'chromium-dbg-linux-interactive-v8',
  'factory': f_chromium_dbg_linux_interactive_v8,
  'category': '90Misc'
}

b_chromium_rel_mac6_perf_v8 = {
  'name': 'Mac10.6 Perf',
  'builddir': 'chromium-rel-mac6-perf-v8',
  'factory': f_chromium_rel_mac6_perf_v8,
  'category': '90Misc'
}

b_webkit_rel_v8 = {
  'name': 'Webkit',
  'builddir': 'webkit-rel-v8',
  'factory': f_webkit_rel_v8,
  'category': '8Webkit'
}

b_webkit_rel_mac_v8 = {
  'name': 'Webkit Mac',
  'builddir': 'webkit-rel-mac-v8',
  'factory': f_webkit_rel_mac_v8,
  'category': '8Webkit'
}

b_webkit_dbg_mac_v8 = {
  'name': 'Webkit Mac - dbg',
  'builddir': 'webkit-dbg-mac-v8',
  'factory': f_webkit_dbg_mac_v8,
  'category': '8Webkit'
}

b_webkit_rel_linux_v8 = {
  'name': 'Webkit Linux',
  'builddir': 'webkit-rel-linux-v8',
  'factory': f_webkit_rel_linux_v8,
  'category': '8Webkit'
}

b_webkit_dbg_linux_v8 = {
  'name': 'Webkit Linux - dbg',
  'builddir': 'webkit-dbg-linux-v8',
  'factory': f_webkit_dbg_linux_v8,
  'category': '8Webkit'
}

b_webkit_rel_linux64_v8 = {
  'name': 'Webkit Linux 64',
  'builddir': 'webkit-rel-linux64-v8',
  'factory': f_webkit_rel_linux64_v8,
  'category': '8Webkit'
}

b_v8_arm_builder = {
  'name': 'V8 Arm - builder',
  'builddir': 'v8-arm-builder',
  'factory': f_v8_arm_builder,
  'category': '6Arm'
}

b_v8_arm_tester = {
  'name': 'V8 Arm - tester',
  'builddir': 'v8-arm-tester',
  'factory': f_v8_arm_tester,
  'category': '6Arm'
}

b_v8_linux_trunk = {
  'name': 'V8 Linux - trunk',
  'builddir': 'v8-linux-trunk',
  'factory': f_v8_linux_trunk,
  'category': '5Branches'
}

b_v8_linux_stable = {
  'name': branch_names['stable']['ia32'],
  'builddir': 'v8-linux-stable',
  'factory': f_v8_linux_stable,
  'category': '5Branches'
}

b_v8_linux_beta = {
  'name': branch_names['beta']['ia32'],
  'builddir': 'v8-linux-beta',
  'factory': f_v8_linux_beta,
  'category': '5Branches'
}

b_v8_linux_dev = {
  'name': branch_names['dev']['ia32'],
  'builddir': 'v8-linux-dev',
  'factory': f_v8_linux_dev,
  'category': '5Branches'
}

b_v8_linux64_trunk = {
  'name': 'V8 Linux64 - trunk',
  'builddir': 'v8-linux64-trunk',
  'factory': f_v8_linux64_trunk,
  'category': '5Branches'
}

b_v8_linux64_stable = {
  'name': branch_names['stable']['x64'],
  'builddir': 'v8-linux64-stable',
  'factory': f_v8_linux64_stable,
  'category': '5Branches'
}

b_v8_linux64_beta = {
  'name': branch_names['beta']['x64'],
  'builddir': 'v8-linux64-beta',
  'factory': f_v8_linux64_beta,
  'category': '5Branches'
}

b_v8_linux64_dev = {
  'name': branch_names['dev']['x64'],
  'builddir': 'v8-linux64-dev',
  'factory': f_v8_linux64_dev,
  'category': '5Branches'
}

b_v8_arm_trunk = {
  'name': 'V8 arm - sim - trunk',
  'builddir': 'v8-arm-trunk',
  'factory': f_v8_arm_trunk,
  'category': '5Branches'
}

b_v8_arm_stable = {
  'name': branch_names['stable']['arm'],
  'builddir': 'v8-arm-stable',
  'factory': f_v8_arm_stable,
  'category': '5Branches'
}

b_v8_arm_beta = {
  'name': branch_names['beta']['arm'],
  'builddir': 'v8-arm-beta',
  'factory': f_v8_arm_beta,
  'category': '5Branches'
}

b_v8_arm_dev = {
  'name': branch_names['dev']['arm'],
  'builddir': 'v8-arm-dev',
  'factory': f_v8_arm_dev,
  'category': '5Branches'
}

b_browser_rel_v8 = {
  'name': 'Chrome Browser Tests',
  'builddir': 'browser-rel-v8',
  'factory': f_browser_tests,
  'category': '91Nightly'
}

b_browser_dbg_v8 = {
  'name': 'Chrome Browser Tests - dbg',
  'builddir': 'browser-dbg-v8',
  'factory': f_browser_tests_debug,
  'category': '91Nightly'
}


c['builders'] = [b_v8_linux,
                 b_v8_linux_debug,
                 b_v8_linux_debug_mozilla,
                 b_v8_linux_debug_test262,
                 b_v8_linux_shared,
                 b_v8_linux64,
                 b_v8_linux64_debug,
                 b_v8_linux64_debug_mozilla,
                 b_v8_linux64_debug_test262,
                 b_v8_linux_nosnap,
                 b_v8_linux_nosnap_debug,
                 b_v8_linux_nosnap_debug_mozilla,
                 b_v8_linux_nosnap_debug_test262,
                 b_v8_win32,
                 b_v8_win32_mozilla,
                 b_v8_win32_test262,
                 b_v8_win32_debug_1,
                 b_v8_win32_debug_2,
                 b_v8_win32_debug_mozilla_1,
                 b_v8_win32_debug_mozilla_2,
                 b_v8_win32_debug_test262_1,
                 b_v8_win32_debug_test262_2,
                 b_v8_mac,
                 b_v8_mac_debug,
                 b_v8_mac_debug_mozilla,
                 b_v8_fuzz,
                 b_v8_linux_arm_sim,
                 b_v8_linux_arm_sim_mozilla,
                 b_v8_linux_arm_sim_debug,
                 b_v8_linux_arm_sim_debug_mozilla_1,
                 b_v8_linux_arm_sim_debug_mozilla_2,
                 b_v8_linux_arm_sim_debug_test262,
                 b_v8_linux_arm_sim_novfp3,
                 b_v8_linux_mips_sim,
                 b_webkit_rel_v8,
                 b_webkit_rel_mac_v8,
                 b_webkit_rel_linux_v8,
                 b_webkit_rel_linux64_v8,
                 b_webkit_dbg_mac_v8,
                 b_webkit_dbg_linux_v8,
                 b_v8_win64,
                 b_v8_linux_isolates,
                 b_v8_linux_nosse2,
                 b_v8_linux_nosse3,
                 b_v8_linux_nosse4,
                 b_v8_arm_builder,
                 b_v8_arm_tester,
                 b_v8_linux_trunk,
                 b_v8_linux_stable,
                 b_v8_linux_beta,
                 b_v8_linux_dev,
                 b_v8_arm_trunk,
                 b_v8_arm_stable,
                 b_v8_arm_beta,
                 b_v8_arm_dev,
                 b_v8_linux64_trunk,
                 b_v8_linux64_stable,
                 b_v8_linux64_beta,
                 b_v8_linux64_dev,
                 b_chromium_dbg_linux_interactive_v8,
                 b_chromium_rel_mac6_perf_v8,
                 b_chromium_rel_win7_perf_dual_v8,
                 b_browser_rel_v8,
                 b_browser_dbg_v8]

# Associate the slaves to the builders. The configuration is in slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'v8')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    templates=['./templates', '../master.chromium/templates'])


from buildbot.status.mail import MailNotifier
mn = MailNotifier(fromaddr=ActiveMaster.from_address,
                  mode='problem',
                  sendToInterestedUsers=True,
                  extraRecipients=['mstarzinger@chromium.org'],
                  lookup=master_utils.FilterDomain())
c['status'].append(mn)

####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/client.v8/'
c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url

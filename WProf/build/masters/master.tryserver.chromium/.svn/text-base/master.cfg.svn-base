# -*- python -*-
# ex: set syntax=python:
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# READ THIS:
# See http://dev.chromium.org/developers/testing/chromium-build-infrastructure

# These modules come from scripts, which must be in the PYTHONPATH.
from master import master_utils
from master import slaves_list
from master.builders_pools import BuildersPools
from master.factory import chromium_factory, chromeos_factory
from master.try_job_http import TryJobHTTP
from master.try_job_rietveld import TryJobRietveld
from master.try_job_svn import TryJobSubversion

import config

ActiveMaster = config.Master.TryServer


MAIL_NOTIFIER = True
UPDATE_CODEREVIEW = ActiveMaster.is_production_host
LISTEN_TO_SVN = ActiveMaster.svn_url and ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

c['change_source'] = []

# Avoid merging requests.
c['mergeRequests'] = lambda _builder, _request1, _request2: False


####### BUILDERS

## FACTORIES

m_chromium_win = chromium_factory.ChromiumFactory(
    'src/build',
    target_platform='win32')

m_chromium_win_webkit = chromium_factory.ChromiumFactory(
    'src/build',
    target_platform='win32')

m_chromium_linux = chromium_factory.ChromiumFactory(
    'src/build',
    target_platform='linux2')

m_chromium_mac = chromium_factory.ChromiumFactory(
    'src/build',
    target_platform='darwin')

# Chromium for ChromiumOS
m_chromium_chromiumos = chromium_factory.ChromiumFactory(
    'src/build',
    target_platform='linux2')

m_chromium_android = chromium_factory.ChromiumFactory(
    '',
    target_platform='linux2',
    nohooks_on_update=True,
    target_os='android')

def NextJob(builder, requests):
  """Always prioritize commit queue jobs over try jobs."""
  for req in requests:
    if any(c.who == 'commit-bot@chromium.org' for c in req.source.changes):
      return req
  return requests[0]


def CreateBuilder(platform, builder_name, target,
                  tests=None, options=None, mode=None, timeout=2400,
                  slavebuilddir=None, extra_gyp_defines=None,
                  gclient_env=None, sharded_tests=None, gyp_generators=None,
                  asan=False, non_default=None, use_xvfb_on_linux=None,
                  annotated_step=None):
  """Generates and register a builder along with its slave(s)."""
  if platform not in ('win32', 'win64', 'linux', 'mac',
                      'android', 'android_test'):
    raise Exception(platform + ' is not a known os type')

  factory_properties = {
    'non_default': non_default or [
      'check_licenses',
      'courgette_unittests',
      'googleurl_unittests',
      'pyauto_functional_tests',
      'sync_integration_tests',
    ],
    'gclient_env': {
      'GYP_DEFINES': '',
    },
  }
  if annotated_step:
    factory_properties['annotated_step'] = annotated_step
  annotation_script = None
  if sharded_tests:
    factory_properties['sharded_tests'] = sharded_tests
  # use_xvfb_on_linux required for pyauto_functional_tests on linux.
  # Unused on other platforms and tests.
  if platform == 'linux' and use_xvfb_on_linux is not None:
    factory_properties['use_xvfb_on_linux'] = use_xvfb_on_linux
  project = None
  if platform in ('win32', 'win64'):
    factory = m_chromium_win
    if builder_name == 'win_aura':
      project = 'all.sln;aura_builder'
    elif builder_name == 'win_cf':
      project = 'all.sln;chromium_builder_win_cf'
    elif builder_name == 'win_gpu':
      if target == 'Debug':
        project = 'all.sln;chromium_gpu_debug_builder'
      else:
        project = 'all.sln;chromium_gpu_builder'
    else:
      project = 'all.sln'
    factory_properties['process_dumps'] = True
    factory_properties['gclient_env']['GYP_DEFINES'] = 'fastbuild=1'
    factory_properties['start_crash_handler'] = True
  elif platform == 'linux':
    factory = m_chromium_linux
    factory_properties['gclient_env']['GYP_DEFINES'] = 'fastbuild=1'
  elif platform == 'android':
    factory = m_chromium_android
    annotation_script = 'src/build/android/buildbot_try_compile.sh'
  elif platform == 'android_test':
    factory = m_chromium_android
    annotation_script = 'src/build/android/buildbot_try_compile_test.sh'
  elif platform == 'mac':
    factory = m_chromium_mac
    factory_properties['gclient_env']['GYP_DEFINES'] = 'fastbuild=1'

  if gclient_env:
    factory_properties['gclient_env'].update(gclient_env)
  if extra_gyp_defines:
    factory_properties['gclient_env']['GYP_DEFINES'] += ' ' + extra_gyp_defines
  if gyp_generators:
    factory_properties['gclient_env']['GYP_GENERATORS'] = gyp_generators
  if asan:
    factory_properties['asan'] = True
  if annotation_script:
    # Note new slave type AnnotatedTrybot; we don't want a compile step added
    # in gclient_factory.py.
    # TODO(jrg): is a new slave type the right direction?
    builder_factory = factory.ChromiumAnnotationFactory(
        slave_type='AnnotatedTrybot', target=target, tests=tests,
        options=options,
        compile_timeout=timeout, project=project,
        factory_properties=factory_properties,
        annotation_script=annotation_script)
  else:
    builder_factory = factory.ChromiumFactory(
        slave_type='Trybot', target=target, tests=tests, options=options,
        mode=mode, compile_timeout=timeout, project=project,
        factory_properties=factory_properties)
  builder_info = {
    'name': builder_name,
    'factory': builder_factory,
  }
  if slavebuilddir:
    builder_info['slavebuilddir'] = slavebuilddir
  return builder_info


def CreateCrosBuilder(builder_name, target, slavebuilddir=None,
                      short_name=None):
  """Generates and register a ChromeOS builder along with its slave(s)."""

  if short_name:
    buildroot = '/b/cbuild.%s' % short_name
  else:
    buildroot = '/b/cbuild'

  # Sets up a factory with the steps to pull out a chromium source tree and
  # apply a patch from a try job
  trial_chrome_factory = m_chromium_chromiumos.ChromiumOSFactory(
      target=None,
      slave_type='CrossTry',
      tests=[],
      )

  # Extends that factory with a Cbuildbot build steps to build and test
  # CrOS using the chrome from the above chromium source tree
  builder_factory = chromeos_factory.CbuildbotFactory(
      params=target,
      buildroot=buildroot,
      crostools_repo=None,
      dry_run=True,
      chrome_root='.',  # this is where ChromiumOSFactory has put "Chrome"
      factory=trial_chrome_factory,
      slave_manager=False,
      ).get_factory()

  builder_info = {
    'name': builder_name,
    'factory': builder_factory,
  }
  if slavebuilddir:
    builder_info['slavebuilddir'] = slavebuilddir
  return builder_info

# Try queues.
pools = BuildersPools('chrome')


# Tests that are single-machine shard-safe on Linux
linux_sharded = [
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'content_unittests',
  'crypto_unittests',
  'gpu_unittests',
  'jingle_unittests',
  'media_unittests',
  'printing_unittests',
  'remoting_unittests',
  'safe_browsing_tests',
  'sync_unit_tests',
]

# Linux builder
linux_tests = [
  'base',
  'browser_tests',
  'cacheinvalidation',
  'check_deps',
  'check_deps2git',
  'check_licenses',
  'crypto',
  'dbus',
  'googleurl',
  'gpu',
  'interactive_ui',
  'jingle',
  'media',
  'nacl_integration',
  'net',
  'printing',
  'pyauto_functional_tests',
  'remoting',
  'safe_browsing',
  'sync_integration',
  'test_shell',
  'unit',
  #'webkit_lint',
  #'webkit_unit',
]

# TODO(maruel): Having a different name to specify the tests to run is a tad
# insane. Should be fixed separately.
linux_tests_full_name = [
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'check_deps',
  'check_licenses',
  'content_unittests',
  'crypto_unittests',
  'dbus_unittests',
  'googleurl_unittests',
  'gpu_unittests',
  'interactive_ui_tests',
  'ipc_tests',
  'jingle_unittests',
  'media_unittests',
  'nacl_integration',
  'net_unittests',
  'printing_unittests',
  'pyauto_functional_tests',
  'remoting_unittests',
  'safe_browsing_tests',
  'sql_unittests',
  'sync_integration_tests',
  'sync_unit_tests',
  'test_shell_tests',
  'ui_unittests',
  'unit_tests',
  'webkit_lint',
  'webkit_unit_tests',
]

b_linux = CreateBuilder(platform='linux',
                        target='Debug',
                        options=['--compiler=goma'],
                        tests=linux_tests,
                        builder_name='linux',
                        sharded_tests=linux_sharded)

b_linux_futura = CreateBuilder(platform='linux',
                               target='Release',
                               options=['--compiler=goma'],
                               tests=linux_tests,
                               builder_name='linux_futura',
                               sharded_tests=linux_sharded,
                               slavebuilddir='linux_aura',
                               extra_gyp_defines='use_aura=1')

linux_aura_tests = [
  'aura',
  'base',
  #'browser_tests',
  'cacheinvalidation',
  #'compositor',
  'crypto',
  'googleurl',
  #'interactive_ui',
  'jingle',
  'media',
  'printing',
  'remoting',
  'ui_unittests',
  'views',
  #'unit',
  'unit_ipc',
  'unit_sync',
  'unit_unit',
  'unit_sql',
  'unit_content',
]

linux_aura_options = [
  'aura_builder',
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'content_unittests',
  'crypto_unittests',
  'googleurl_unittests',
  'interactive_ui_tests',
  'ipc_tests',
  'jingle_unittests',
  'media_unittests',
  'printing_unittests',
  'remoting_unittests',
  'sql_unittests',
  'sync_unit_tests',
  'ui_unittests',
]

b_linux_aura = CreateBuilder(platform='linux',
                             target='Release',
                             options=['--compiler=goma'] + linux_aura_options,
                             tests=linux_aura_tests,
                             builder_name='linux_aura',
                             sharded_tests=linux_sharded,
                             slavebuilddir='linux_aura',
                             extra_gyp_defines='use_aura=1')


pools['chrome'].append('linux')

b_linux_rel = CreateBuilder(platform='linux',
                            target='Release',
                            options=['--compiler=goma'],
                            tests=linux_tests + ['sizes'],
                            builder_name='linux_rel',
                            slavebuilddir='linux',
                            sharded_tests=linux_sharded,
                            extra_gyp_defines='dcheck_always_on=1',
                            use_xvfb_on_linux=True)

b_linux_rel_alt = CreateBuilder(platform='linux',
                                target='Release',
                                options=['--compiler=goma'],
                                tests=linux_tests + ['sizes'],
                                builder_name='linux_rel_alt',
                                slavebuilddir='linux',
                                sharded_tests=linux_sharded,
                                extra_gyp_defines='dcheck_always_on=1',
                                use_xvfb_on_linux=True)

# Tests that are single-machine shard-safe on MacOS
mac_sharded = [
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'content_unittests',
  'crypto_unittests',
  'gpu_unittests',
  'jingle_unittests',
  'media_unittests',
  'printing_unittests',
  'remoting_unittests',
  'safe_browsing_tests',
  'sync_unit_tests',
]

# Mac builder
mac_tests = [
  'base',
  'browser_tests',
  'cacheinvalidation',
  'check_deps',
  'check_deps2git',
  'crypto',
  'googleurl',
  'gpu',
  'interactive_ui',
  'jingle',
  'media',
  'nacl_integration',
  'net',
  'printing',
  'pyauto_functional_tests',
  'remoting',
  'safe_browsing',
  'sync_integration',
  'test_shell',
  'unit',
  #'webkit_lint',
  #'webkit_unit',
]

b_mac = CreateBuilder(platform='mac',
                      target='Debug',
                      tests=mac_tests,
                      options=['--build-tool=ninja', '--compiler=goma-clang'],
                      builder_name='mac',
                      gyp_generators='ninja',
                      sharded_tests=mac_sharded)

pools['chrome'].append('mac')

b_mac_rel = CreateBuilder(platform='mac',
                          target='Release',
                          tests=mac_tests + ['sizes'],
                          options=['--build-tool=ninja',
                                   '--compiler=goma-clang'],
                          extra_gyp_defines=
                              ('dcheck_always_on=1'),
                          builder_name='mac_rel',
                          slavebuilddir='mac',
                          gyp_generators='ninja',
                          sharded_tests=mac_sharded)


# Tests that are single-machine shard-safe on Windows
win_sharded = [
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'crypto_unittests',
  'gpu_unittests',
  'jingle_unittests',
  'media_unittests',
  'printing_unittests',
  'remoting_unittests',
  'safe_browsing_tests',
  'sync_unit_tests',
]

# Windows builder
win_tests = [
  'base',
  'browser_tests',
  'cacheinvalidation',
  'check_deps',
  'check_deps2git',
  'chrome_frame_net_tests',
  'chrome_frame_tests',
  'chrome_frame_unittests',
  'courgette',
  'crypto',
  'googleurl',
  'gpu',
  'installer',
  'interactive_ui',
  'jingle',
  'media',
  'nacl_integration',
  'net',
  'printing',
  'pyauto_functional_tests',
  'remoting',
  'safe_browsing',
  'sync_integration',
  'test_shell',
  'unit',
  #'webkit_lint',
  #'webkit_unit',
]

b_win = CreateBuilder(
    target='Debug',
    platform='win32',
    tests=win_tests,
    builder_name='win',
    sharded_tests=win_sharded,
    gclient_env={
      'GYP_MSVS_VERSION': '2008',
      'GYP_GENERATOR_FLAGS': 'msvs_error_on_missing_sources=1',
    })

pools['chrome'].append('win')

b_win_rel = CreateBuilder(
    target='Release',
    platform='win32',
    tests=win_tests + ['sizes'],
    builder_name='win_rel',
    slavebuilddir='win',
    sharded_tests=win_sharded,
    gclient_env={
      'GYP_MSVS_VERSION': '2008',
      'GYP_GENERATOR_FLAGS': 'msvs_error_on_missing_sources=1',
    },
    extra_gyp_defines='dcheck_always_on=1')

b_win_vs2010 = CreateBuilder(
    target='Debug',
    platform='win32',
    tests=win_tests,
    builder_name='win_vs2010',
    sharded_tests=win_sharded,
    gclient_env={
      'GYP_MSVS_VERSION': '2010',
      'GYP_GENERATOR_FLAGS': 'msvs_error_on_missing_sources=1',
    })

b_win_vs2010_rel = CreateBuilder(
    target='Release',
    platform='win32',
    tests=win_tests,
    builder_name='win_vs2010_rel',
    slavebuilddir='win_vs2010',
    sharded_tests=win_sharded,
    extra_gyp_defines='dcheck_always_on=1',
    gclient_env={
      'GYP_MSVS_VERSION': '2010',
      'GYP_GENERATOR_FLAGS': 'msvs_error_on_missing_sources=1',
    })


# Chromium for ChromiumOS
b_chromium_chromiumos = {
  'name': 'linux_chromeos',
  'factory': m_chromium_chromiumos.ChromiumOSFactory(
      target='Release',
      tests=[
        'aura',
        'aura_shell',
        'base',
        'browser_tests',
        'cacheinvalidation',
        'check_deps',
        'check_deps2git',
        'compositor',
        'crypto',
        'dbus',
        #'googleurl',  # issue 49580
        'gpu',
        'interactive_ui',
        'unit_ipc',
        'jingle',
        'media',
        'net',
        'printing',
        'ui_unittests',
        'unit_sql',
        'unit',
        'views',
      ],
      options=[
        '--compiler=goma',
        'aura_builder',
        'base_unittests',
        'browser_tests',
        'cacheinvalidation_unittests',
        'compositor_unittests',
        'content_unittests',
        'crypto_unittests',
        'dbus_unittests',
        'gpu_unittests',
        'googleurl_unittests',
        'interactive_ui_tests',
        'ipc_tests',
        'jingle_unittests',
        'media_unittests',
        'net_unittests',
        'printing_unittests',
        'remoting_unittests',
        #'safe_browsing_tests',
        'sql_unittests',
        'sync_unit_tests',
        'ui_unittests',
        'unit_tests',
      ],
      factory_properties={
        'gclient_env': {
          'GYP_DEFINES': ('chromeos=1 fastbuild=1'
                          ' ffmpeg_branding=ChromeOS'
                          ' dcheck_always_on=1'
                          ' component=shared_library'
                          ' proprietary_codecs=1')}})
}

b_android = CreateBuilder(platform='android',
                          target='Release',
                          builder_name='android')

b_android_test = CreateBuilder(platform='android_test',
                               target='Release',
                               builder_name='android_test')

# 32 bits tools can't link libwebcore.a anymore due to lack of virtual address
# space, including OSX 10.5.
valgrind_gyp_defines = (
    chromium_factory.ChromiumFactory.MEMORY_TOOLS_GYP_DEFINES + ' enable_svg=0')
drmemory_gyp_defines = chromium_factory.ChromiumFactory.DR_MEMORY_GYP_DEFINES

b_valgrind_linux = {
  'name': 'linux_valgrind',
  'factory': m_chromium_linux.ChromiumFactory(
      target='Release',
      options=[
        '--compiler=goma',
        'DumpRenderTree',
        'base_unittests',
        'content_unittests',
        'crypto_unittests',
        'googleurl_unittests',
        'ipc_tests',
        'media_unittests',
        'net_unittests',
        'printing_unittests',
        'remoting_unittests',
        'safe_browsing_tests',
        'sql_unittests',
        'sync_unit_tests',
        'test_shell_tests',
        'ui_unittests',
        'unit_tests',
      ],
      tests=[
        'valgrind_base',
        'valgrind_content',
        'valgrind_crypto',
        'valgrind_googleurl',
        'valgrind_ipc',
        'valgrind_media',
        'valgrind_net',
        'valgrind_printing',
        'valgrind_remoting',
        'valgrind_safe_browsing',
        'valgrind_sql',
        'valgrind_sync',
        'valgrind_test_shell',
        'valgrind_unit',
      ],
      factory_properties={
        'needs_valgrind': True,
        'gclient_env': {
          'GYP_DEFINES': valgrind_gyp_defines + ' target_arch=ia32'}}),
}

b_valgrind_mac = {
  'name': 'mac_valgrind',
  'factory': m_chromium_mac.ChromiumFactory(
      target='Debug',
      # This trybot will build every build target. We can speed up the build
      # for Valgrind by building only what we really need if/when we want to.
      # See http://crbug.com/42298
      tests=[
        'valgrind_base',
        # Re-enable when http://crbug.com/130744 is fixed (BSODs on the trybot)
        # 'valgrind_content',
        'valgrind_crypto',
        'valgrind_googleurl',
        'valgrind_media',
        'valgrind_net',
        'valgrind_printing',
        'valgrind_remoting',
        'valgrind_safe_browsing',
        'valgrind_sql',
        'valgrind_test_shell',
        'valgrind_unit',
      ],
      factory_properties={
        'needs_valgrind': True,
        'gclient_env': {'GYP_DEFINES': valgrind_gyp_defines}}),
}

b_chromium_chromiumos_valgrind = {
  'name': 'linux_chromeos_valgrind',
  'factory': m_chromium_chromiumos.ChromiumOSFactory(
      target='Release',
      options=[
        '--compiler=goma',
        'base_unittests',
        'content_unittests',
        'crypto_unittests',
        'googleurl_unittests',
        'ipc_tests',
        'media_unittests',
        'net_unittests',
        'printing_unittests',
        'remoting_unittests',
        'safe_browsing_tests',
        'sql_unittests',
        'sync_unit_tests',
        'ui_unittests',
        'unit_tests',
      ],
      tests=[
        'valgrind_base',
        'valgrind_content',
        'valgrind_crypto',
        'valgrind_googleurl',
        'valgrind_ipc',
        'valgrind_media',
        'valgrind_net',
        'valgrind_printing',
        'valgrind_remoting',
        'valgrind_safe_browsing',
        'valgrind_sql',
        'valgrind_sync',
        'valgrind_unit',
      ],
      factory_properties={
        'needs_valgrind': True,
        'gclient_env': {
          'GYP_DEFINES': (valgrind_gyp_defines +
                          ' chromeos=1 target_arch=ia32'
                          ' ffmpeg_branding=ChromeOS'
                          ' proprietary_codecs=1')}})
}

b_tsan_linux = {
  'name': 'linux_tsan',
  # Reuse the directory.
  'slavebuilddir': 'linux_valgrind',
  'factory': m_chromium_linux.ChromiumFactory(
      target='Release',
      options=[
        '--compiler=goma',
        'base_unittests',
        'content_unittests',
        'crypto_unittests',
        'googleurl_unittests',
        'ipc_tests',
        'media_unittests',
        'net_unittests',
        'printing_unittests',
        'remoting_unittests',
        'sql_unittests',
        'sync_unit_tests',
        'ui_unittests',
        'unit_tests',
      ],
      tests=[
        'tsan_base',
        'tsan_content',
        'tsan_crypto',
        'tsan_googleurl',
        'tsan_ipc',
        'tsan_media',
        'tsan_net',
        'tsan_printing',
        'tsan_remoting',
        'tsan_sql',
        'tsan_sync',
        'tsan_unit',
      ],
      factory_properties={
        'needs_valgrind': True,
        'gclient_env': {'GYP_DEFINES': (valgrind_gyp_defines +
                                        ' target_arch=ia32')}}),
}

b_drmemory_win = {
  'name': 'win_drmemory',
  'factory': m_chromium_win.ChromiumFactory(
    target='Debug',
    project='all.sln;chromium_builder_dbg_drmemory_win',
    tests=[
      'drmemory_light_base',
      'drmemory_light_crypto',
      'drmemory_light_googleurl',
      'drmemory_light_ipc',
      'drmemory_light_media',
      'drmemory_light_net',
      'drmemory_light_printing',
      'drmemory_light_remoting',
      'drmemory_light_sql',
      'drmemory_light_unit',
    ],
    factory_properties={
      'gclient_env': {'GYP_DEFINES': drmemory_gyp_defines},
      'needs_drmemory' : True,
    }
  ),
}

# Linux coverage builder
GYP_DEFINES_FOR_COVERAGE = ('coverage=1 '
                            'fastbuild=1 '
                            'enable_svg=0')

b_coverage_linux = {
  'name': 'linux_coverage',
  'factory': m_chromium_linux.ChromiumFactory(
      target='Debug',
      clobber=False,
      options=['--compiler=goma', 'coverage_build'],
      tests=['run_coverage_bundles', 'process_coverage'],
      factory_properties={
        'gclient_env': {'GYP_DEFINES': GYP_DEFINES_FOR_COVERAGE},
        'perf_id': 'chromium-dbg-linux-try',
        'use_build_number': True}),
}

# WebKit Layout builders
b_linux_layout = {
  'name': 'linux_layout',
  'slavebuilddir': 'linux_layout',
  'factory': m_chromium_linux.ChromiumFactory(
      target='Debug',
      tests=[
        'test_shell',
        'webkit',
        'webkit_lint',
        'webkit_unit',
      ],
      options=['--compiler=goma', 'test_shell', 'test_shell_tests',
               'webkit_unit_tests', 'DumpRenderTree']),
}

b_linux_layout_rel = {
  'name': 'linux_layout_rel',
  # Reuse the directory.
  'slavebuilddir': 'linux_layout',
  'factory': m_chromium_linux.ChromiumFactory(
      target='Release',
      tests=[
        'test_shell',
        'webkit',
        'webkit_lint',
        'webkit_unit',
      ],
      options=['--compiler=goma', 'test_shell', 'test_shell_tests',
               'webkit_unit_tests', 'DumpRenderTree']),
}

b_mac_layout = {
  'name': 'mac_layout',
  'slavebuilddir': 'mac_layout',
  'factory': m_chromium_mac.ChromiumFactory(
      target='Debug',
      tests=[
        'test_shell',
        'webkit',
        'webkit_lint',
        'webkit_unit',
      ],
      options=[
        '--compiler=goma-clang',
        '--', '-project', '../webkit/webkit.xcodeproj']),
}

b_mac_layout_rel = {
  'name': 'mac_layout_rel',
  # Reuse the directory.
  'slavebuilddir': 'mac_layout',
  'factory': m_chromium_mac.ChromiumFactory(
      target='Release',
      tests=[
        'test_shell',
        'webkit',
        'webkit_lint',
        'webkit_unit',
      ],
      options=[
        '--compiler=goma-clang',
        '--', '-project', '../webkit/webkit.xcodeproj']),
}

b_win_layout = {
  'name': 'win_layout',
  'slavebuilddir': 'win_layout',
  'factory': m_chromium_win_webkit.ChromiumFactory(
      target='Debug',
      project='all.sln;webkit_builder_win',
      tests=[
        'test_shell',
        'webkit',
        'webkit_lint',
        'webkit_unit',
      ]),
}

b_win_layout_rel = {
  'name': 'win_layout_rel',
  # Reuse the directory.
  'slavebuilddir': 'win_layout',
  'factory': m_chromium_win_webkit.ChromiumFactory(
      target='Release',
      project='all.sln;webkit_builder_win',
      tests=[
        'test_shell',
        'webkit',
        'webkit_lint',
        'webkit_unit',
      ]),
}


# Chrome Frame builder
b_win_chrome_frame = CreateBuilder(
    platform='win32',
    target='Debug',
    tests=[
      'chrome_frame_net_tests',
      'chrome_frame_tests',
    ],
    builder_name='win_cf',
    slavebuilddir='win',
    extra_gyp_defines='fastbuild=0')

# Clang builders
b_linux_clang = CreateBuilder(
    platform='linux',
    target='Debug',
    options=['--build-tool=make', '--compiler=goma-clang'],
    tests=linux_tests,
    extra_gyp_defines='clang=1 clang_use_chrome_plugins=1',
    builder_name='linux_clang',
    # Keep all tests off by default.
    non_default=linux_tests_full_name)

b_linux_clang_no_goma = CreateBuilder(
    platform='linux',
    target='Debug',
    options=['--build-tool=make', '--compiler=clang'],
    tests=[],
    extra_gyp_defines='clang=1 clang_use_chrome_plugins=1',
    builder_name='linux_clang_no_goma',
    slavebuilddir='linux_clang')

b_mac_no_goma = CreateBuilder(
    platform='mac',
    target='Debug',
    tests=[
      'base',
      'crypto',
      'ui_unittests',
      'unit',
    ],
    builder_name='mac_no_goma',
    slavebuilddir='mac')

b_linux_chromeos_clang = {
  'name': 'linux_chromeos_clang',
  'factory': m_chromium_chromiumos.ChromiumOSFactory(
      target='Debug',
      options=['--build-tool=make', '--compiler=clang', 'aura_builder' ],
      tests=[],
      factory_properties={
        # CreateBuilder() adds "fastbuild=1" for the other 2 clang bots.
        'gclient_env': {
          'GYP_DEFINES': ('chromeos=1 target_arch=ia32'
                          ' clang=1 clang_use_chrome_plugins=1'
                          ' fastbuild=1'
                          ' ffmpeg_branding=ChromeOS proprietary_codecs=1'
                          ' component=shared_library')}})
}

# Same setup than 'linux_rel' but runs the latest version of ubuntu.
b_linux_ubuntu_latest_rel = CreateBuilder(
    platform='linux',
    target='Release',
    options=['--compiler=goma'],
    tests=linux_tests,
    builder_name='linux_ubuntu_latest_rel',
    slavebuilddir='linux',
    sharded_tests=linux_sharded,
    extra_gyp_defines='dcheck_always_on=1')

b_win_aura = CreateBuilder(
    platform='win32',
    target='Debug',
    builder_name='win_aura',
    tests=[
      'aura',
      'aura_shell',
      'compositor',
      'views',
    ],
    extra_gyp_defines='use_aura=1')

# this matches the bot on the main waterfall soon
b_win_ash = CreateBuilder(
    platform='win32',
    target='Debug',
    builder_name='win_ash',
    tests=[
      'aura',
      'aura_shell',
      'compositor',
      'views',
    ],
    extra_gyp_defines='use_ash=1')

b_linux_asan = {
  'name': 'linux_asan',
  'factory': m_chromium_linux.ChromiumASANFactory(
      slave_type='BuilderTester',
      options=[
        '--compiler=goma-clang',
        'base_unittests',
        'browser_tests',
        'cacheinvalidation_unittests',
        'content_unittests',
        'crypto_unittests',
        'googleurl_unittests',
        'gpu_unittests',
        'ipc_tests',
        'jingle_unittests',
        'media_unittests',
        'net_unittests',
        'printing_unittests',
        'remoting_unittests',
        'safe_browsing_tests',
        'sql_unittests',
        'sync_unit_tests',
        'ui_unittests',
        'unit_tests',
      ],
      tests=[
        'base',
        'browser_tests',
        'cacheinvalidation',
        'crypto',
        #'googleurl',  # issue 49580
        'gpu',
        'jingle',
        'media',
        'net',
        'printing',
        'remoting',
        'safe_browsing',
        'unit',
      ],
      factory_properties={
        'asan': True,  # Used by runtest.py.
        'gclient_env': {'GYP_DEFINES': 'asan=1 linux_use_tcmalloc=0'}}),
}

b_linux_chromeos_asan = {
  'name': 'linux_chromeos_asan',
  'factory': m_chromium_chromiumos.ChromiumOSASANFactory(
      slave_type='BuilderTester',
      options=[
        '--compiler=goma-clang',
        'aura_builder',
        'aura_shell_unittests',
        'base_unittests',
        'browser_tests',
        'cacheinvalidation_unittests',
        'compositor_unittests',
        'content_unittests',
        'crypto_unittests',
        'googleurl_unittests',
        'gpu_unittests',
        'ipc_tests',
        'jingle_unittests',
        'media_unittests',
        'net_unittests',
        'printing_unittests',
        'remoting_unittests',
        'safe_browsing_tests',
        'sql_unittests',
        'sync_unit_tests',
        'ui_unittests',
        'unit_tests',
      ],
      tests=[
        'aura',
        'aura_shell',
        'base',
        'browser_tests',
        'cacheinvalidation',
        'compositor',
        'content',
        'crypto',
        #'googleurl',  # issue 49580
        'gpu',
        'jingle',
        'media',
        'net',
        'printing',
        'remoting',
        'safe_browsing',
        'ui_unittests',
        'unit_sql',
        'unit',
      ],
      factory_properties={
        'asan': True,  # Used by runtest.py.
        'gclient_env': {
          'GYP_DEFINES': 'asan=1 linux_use_tcmalloc=0 '
                         'chromeos=1 component=static_library '}
      }),
}

mac_asan_tests = list(
  set(mac_tests) - set(['nacl_integration'])
)

b_mac_asan = CreateBuilder(platform='mac',
                           target='Release',
                           tests=mac_asan_tests,
                           options=['--build-tool=ninja',
                                    '--compiler=goma-clang',
                                    '--disable-aslr'],
                           extra_gyp_defines='asan=1',
                           builder_name='mac_asan',
                           slavebuilddir='mac_asan',
                           gyp_generators='ninja',
                           sharded_tests=mac_sharded,
                           asan=True)

b_linux_heapcheck = {
  'name': 'linux_heapcheck',
  'factory': m_chromium_linux.ChromiumFactory(
      target='Debug',
      slave_type='BuilderTester',
      options=['content_unittests',
               'googleurl_unittests',
               'printing_unittests',
               'media_unittests',
               'courgette_unittests',
               'remoting_unittests',
               'sql_unittests',
               'sync_unit_tests',
               'ipc_tests',
               'base_unittests',
               'crypto_unittests',
               'net_unittests',
               'ui_unittests',
               'unit_tests',
               'test_shell_tests',
               'DumpRenderTree',
             ],
      tests=['heapcheck_googleurl',
             'heapcheck_printing',
             'heapcheck_media',
             'heapcheck_content',
             'heapcheck_courgette',
             'heapcheck_remoting',
             'heapcheck_sql',
             'heapcheck_sync',
             'heapcheck_ipc',
             'heapcheck_base',
             'heapcheck_crypto',
             'heapcheck_net',
             'heapcheck_ui_unittests',
             'heapcheck_unit',
             'heapcheck_test_shell',
           ],
      factory_properties={
        'gclient_env': {'GYP_DEFINES': ('linux_use_tcmalloc=1 '
                                        'linux_use_heapchecker=1 '
                                        'linux_keep_shadow_stacks=1 '
                                        'werror= ')
        }
      }
  ),
}

b_linux_redux = {
  'name': 'linux_redux',
  'factory': m_chromium_linux.ChromiumFactory(
      slave_type='BuilderTester',
      options=[
        '--compiler=goma',
        'base_unittests',
        'cacheinvalidation_unittests',
        'content_unittests',
        'crypto_unittests',
        'googleurl_unittests',
        'ipc_tests',
        'jingle_unittests',
        'media_unittests',
        'net_unittests',
        'printing_unittests',
        'remoting_unittests',
        'sql_unittests',
        'sync_unit_tests',
        'ui_unittests',
        'unit_tests',
      ],
      tests=[
        'base',
        'cacheinvalidation',
        'crypto',
        'jingle',
        'net',
        'unit',
      ],
      factory_properties={
        'gclient_env': {
          'GYP_DEFINES': ('linux_fpic=1 '
                          'enable_touch_events=1 '
                          'disable_nacl=1 '
                          'linux_use_tcmalloc=0 '
                          'linux_breakpad=0 '
                          'remoting=0 '
                          'configuration_policy=0 '
                          'safe_browsing=0 '
                          'use_openssl=1 ')}}),
}

b_cros_pfq_x86 = CreateCrosBuilder(
    'cros_x86',
    '--lkgm x86-generic-tot-chrome-pfq-informational',
    short_name='x86',
)

b_cros_pfq_amd64 = CreateCrosBuilder(
    'cros_amd64',
    '--lkgm amd64-corei7-tot-chrome-pfq-informational',
    short_name='amd64',
)

b_cros_pfq_arm = CreateCrosBuilder(
    'cros_arm',
    '--lkgm arm-generic-tot-chrome-pfq-informational',
    short_name='arm',
)

b_cros_pfq_tegra2 = CreateCrosBuilder(
    'cros_tegra2',
    '--lkgm arm-tegra2-tot-chrome-pfq-informational',
    short_name='tegra2',
)

# GPU try bots
b_linux_gpu = CreateBuilder(
    platform='linux',
    target='Debug',
    options=['--compiler=goma', 'chromium_gpu_debug_builder'],
    tests=[
      'gpu_tests',
      'gl_tests',
    ],
    builder_name='linux_gpu')

b_win_gpu = CreateBuilder(
    target='Debug',
    platform='win32',
    tests=[
      'gpu_tests',
      'gl_tests',
    ],
    builder_name='win_gpu')

b_mac_gpu = CreateBuilder(
    platform='mac',
    target='Debug',
    options=[
        '--build-tool=ninja',
        '--compiler=goma-clang', 'chromium_gpu_debug_builder',
    ],
    tests=[
      'gpu_tests',
      'gl_tests',
    ],
    builder_name='mac_gpu',
    gyp_generators='ninja')

# NaCl SDK try bots
nacl_sdk_script = 'src/native_client_sdk/src/build_tools/buildbot_run.py'
b_linux_nacl_sdk = CreateBuilder(
    platform='linux',
    target='Debug',
    options=['--compiler=goma'],
    tests=['annotated_steps'],
    annotated_step=nacl_sdk_script,
    builder_name='linux_nacl_sdk')
b_win_nacl_sdk = CreateBuilder(
    target='Debug',
    platform='win32',
    tests=['annotated_steps'],
    annotated_step=nacl_sdk_script,
    builder_name='win_nacl_sdk')
b_mac_nacl_sdk = CreateBuilder(
    platform='mac',
    target='Debug',
    options=['--build-tool=ninja', '--compiler=goma-clang'],
    tests=['annotated_steps'],
    builder_name='mac_nacl_sdk',
    annotated_step=nacl_sdk_script,
    gyp_generators='ninja')


# For now we will assume a fixed toolchain location on the builders.
crosstool_prefix = (
    '/usr/local/crosstool-trusted/arm-crosstool/bin/arm-none-linux-gnueabi')
# Factory properties to use for an arm build.
arm_gclient_env = {
  'AR': crosstool_prefix + '-ar',
  'AS': crosstool_prefix + '-as',
  'CC': crosstool_prefix + '-gcc',
  'CXX': crosstool_prefix + '-g++',
  'LD': crosstool_prefix + '-ld',
  'RANLIB': crosstool_prefix + '-ranlib',
  'GYP_GENERATORS': 'make',
  'GYP_DEFINES': (
      'target_arch=arm '
      'sysroot=/usr/local/arm-rootfs '
      'disable_nacl=1 '
      'linux_use_tcmalloc=0 '
      'armv7=1 '
      'arm_thumb=1 '
      'arm_neon=0 '
      'arm_fpu=vfpv3-d16 '
      'chromeos=1 '  # Since this is the intersting variation.
  ),
}

c['builders'] = [
  b_linux_rel, b_linux_rel_alt, b_mac_rel, b_win_rel,
  b_linux_clang,
  b_linux, b_mac, b_win, b_android, b_android_test,
  b_win_vs2010_rel, b_win_vs2010,
  b_chromium_chromiumos,
  b_valgrind_linux, b_valgrind_mac,
  b_chromium_chromiumos_valgrind,
  b_tsan_linux, b_drmemory_win,
  b_linux_layout, b_mac_layout, b_win_layout,
  b_linux_layout_rel, b_mac_layout_rel, b_win_layout_rel,
  b_coverage_linux,
  b_win_chrome_frame,
  b_mac_no_goma, b_linux_clang_no_goma,
  b_linux_chromeos_clang,
  b_linux_ubuntu_latest_rel,
  b_linux_futura, b_linux_aura, b_win_ash, b_win_aura,
  b_linux_asan,
  b_linux_chromeos_asan,
  b_mac_asan,
  b_linux_heapcheck,
  b_linux_redux,
  b_cros_pfq_x86, b_cros_pfq_amd64, b_cros_pfq_arm, b_cros_pfq_tegra2,
  b_linux_gpu, b_win_gpu, b_mac_gpu,
  b_linux_nacl_sdk, b_win_nacl_sdk, b_mac_nacl_sdk,
]


# Slaves are loaded from slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'TryServer')

for builder in c['builders']:
  # Associate the slaves to the builders. The configuration is in slaves.cfg.
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])
  # Don't enable auto_reboot for people testing locally.
  builder['auto_reboot'] = ActiveMaster.is_production_host
  # Prioritize commit-queue jobs over try jobs.
  # This is documented starting with 0.8.2
  # http://buildbot.net/buildbot/docs/0.8.2/Prioritizing-Builds.html#Prioritizing-Builds
  # but appears to be working on 0.7.12 already.
  builder['nextBuild'] = NextJob


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### SCHEDULERS

# Configure the Schedulers;
# Main Tryscheduler for the try queue. groups is defined in the loop above.
c['schedulers'] = []

last_good_urls = {'chrome': ActiveMaster.last_good_url}
code_review_sites = {'chrome': ActiveMaster.code_review_site}

c['schedulers'].append(TryJobHTTP(
      name='try_job_http',
      port=ActiveMaster.try_job_port,
      last_good_urls=last_good_urls,
      code_review_sites=code_review_sites,
      pools=pools))

c['schedulers'].append(TryJobRietveld(
      name='try_job_rietveld',
      last_good_urls=last_good_urls,
      code_review_sites=code_review_sites,
      pools=pools,
      project='chrome'))

if LISTEN_TO_SVN:
  c['schedulers'].append(TryJobSubversion(
      name='try_job_svn',
      svn_url=ActiveMaster.svn_url,
      last_good_urls=last_good_urls,
      code_review_sites=code_review_sites,
      pools=pools))


####### STATUS TARGETS

# Adds common status and tools to this master.
# Use our own mail notifier.
master_utils.AutoSetupMaster(c, ActiveMaster, False,
                             public_html='../master.chromium/public_html',
                             templates=['./templates',
                                        '../master.chromium/templates'])

if MAIL_NOTIFIER:
  # Add a dumb MailNotifier first so it will be used for BuildSlave with
  # notify_on_missing set when they go missing.
  from buildbot.status import mail
  c['status'].append(mail.MailNotifier(
      fromaddr=ActiveMaster.from_address,
      builders=[],
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails()))

  # Try job result emails.
  from master.try_mail_notifier import TryMailNotifier
  c['status'].append(TryMailNotifier(
      fromaddr=ActiveMaster.from_address,
      subject="try %(result)s for %(reason)s on %(builder)s @ r%(revision)s",
      mode='all',
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails()))

if UPDATE_CODEREVIEW:
  from master.status_push import TryServerHttpStatusPush
  c['status'].append(
      TryServerHttpStatusPush(serverUrl=ActiveMaster.code_review_site))


# Keep last try jobs, the default is too low. Must keep at least a few days
# worth of try jobs.
c['buildHorizon'] = 3000
c['logHorizon'] = 3000
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 200
# Must be at least 2x the number of on-going builds.
c['buildCacheSize'] = 200
c['logCompressionLimit'] = False


# Hack buildbot so the Stop build button doesn't work anymore. Otherwise it's
# just a pain, user misuse this button all the time.
def hack_stop(function):
  def hook(*args, **kwargs):
    result = function(*args, **kwargs)
    result = result.replace('<input type="submit" value="Stop',
        '<input type="button" onclick="alert(\''
        'For more information, visit '
        'http://dev.chromium.org/developers/try-server-usage'
        '\');"'
        ' value="Stop')
    return result
  return hook

# Only do the hack_stop if we are the production master.  This allows
# us to keep the STOP button live for local/test instances.
#if ActiveMaster.is_production_host:
#  from buildbot.status.web.builder import StatusResourceBuilder
#  StatusResourceBuilder.build_line = hack_stop(StatusResourceBuilder.build_line)
#  from buildbot.status.web import base
#  base.make_stop_form = hack_stop(base.make_stop_form)


####### PROJECT IDENTITY

# The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.
c['projectURL'] = 'http://dev.chromium.org/developers/testing/try-server-usage'

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/tryserver.chromium/'

# vi: set ts=4 sts=2 sw=2 et:

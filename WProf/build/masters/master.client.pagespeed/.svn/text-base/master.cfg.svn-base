# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.changes import svnpoller
from buildbot.scheduler import Scheduler

from master import build_utils
from master import master_utils
from master import slaves_list
from master.factory import pagespeed_factory

import config

ActiveMaster = config.Master.PageSpeed

TREE_GATE_KEEPER = ActiveMaster.is_production_host
GOOD_REVISIONS = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### DATABASE

import os
if os.path.isfile('.dbconfig'):
  values = {}
  execfile('.dbconfig', values)
  if 'password' not in values:
    raise Exception('could not get db password')

  c['db_url'] = 'postgresql://%s:%s@%s/%s' % (
      values['username'], values['password'],
      values.get('hostname', 'localhost'), values['dbname'])


# Disable compression for the stdio files.
c['logCompressionLimit'] = False


####### POLLERS

def PageSpeedTreeFileSplitter(path):
  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['lib', 'firefox_addon', 'chromium_extension']
  return build_utils.SplitPath(projects, path)

def ModPageSpeedTreeFileSplitter(path):
  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return build_utils.SplitPath(projects, path)

# Polls the svn server every 10 seconds for new changes.
pagespeed_rev = 'http://code.google.com/p/page-speed/source/detail?r=%s'
pagespeed_poller = svnpoller.SVNPoller(
    svnurl="http://page-speed.googlecode.com/svn",
    split_file=PageSpeedTreeFileSplitter,
    pollinterval=10,
    revlinktmpl=pagespeed_rev)

modpagespeed_rev = 'http://code.google.com/p/modpagespeed/source/detail?r=%s'
modpagespeed_poller = svnpoller.SVNPoller(
    svnurl="http://modpagespeed.googlecode.com/svn/trunk",
    split_file=ModPageSpeedTreeFileSplitter,
    pollinterval=10,
    revlinktmpl=modpagespeed_rev)

c['change_source'] = [pagespeed_poller, modpagespeed_poller]



####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk/src.
s_lib = Scheduler(name='lib',
                  branch='lib',
                  treeStableTimer=60,
                  builderNames=['Windows XP Lib',
                                'Windows 7 Lib',
                                'Lucid 64 Lib',
                                'Lucid 32 Lib',
                                'Mac 10.6 Lib',
                                'Windows XP Fx',
                                'Windows 7 Fx',
                                'Lucid 64 Fx',
                                'Lucid 32 Fx',
                                'Mac 10.6 Fx',
                                'Windows XP Chromium',
                                'Windows 7 Chromium',
                                'Lucid 64 Chromium',
                                'Lucid 32 Chromium',
                                'Mac 10.6 Chromium'])

s_firefox = Scheduler(name='firefox',
                      branch='firefox_addon',
                      treeStableTimer=60,
                      builderNames=['Windows XP Fx',
                                    'Windows 7 Fx',
                                    'Lucid 64 Fx',
                                    'Lucid 32 Fx',
                                    'Mac 10.6 Fx'])

s_chromium = Scheduler(name='chromium',
                       branch='chromium_extension',
                       treeStableTimer=60,
                       builderNames=['Windows XP Chromium',
                                     'Windows 7 Chromium',
                                     'Lucid 64 Chromium',
                                     'Lucid 32 Chromium',
                                     'Mac 10.6 Chromium'])

s_modpagespeed = Scheduler(name='modpagespeed',
                           branch='src',
                           treeStableTimer=60,
                           builderNames=['Windows XP MPS',
                                         'Windows 7 MPS',
                                         'Lucid 64 MPS',
                                         'Lucid 32 MPS',
                                         'Mac 10.6 MPS'])

c['schedulers'] = [s_lib, s_firefox, s_chromium, s_modpagespeed]

####### BUILDERS

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_win = pagespeed_factory.PageSpeedFactory('src/build', 'win32')
m_linux = pagespeed_factory.PageSpeedFactory('src/build', 'linux2')
m_mac = pagespeed_factory.PageSpeedFactory('src/build', 'darwin')

f_linux_lib = m_linux.PageSpeedFactory(target='Release',
                                       tests=['unit'])

f_win_lib = m_win.PageSpeedFactory(project='all.sln',
                                   target='Release',
                                   tests=['unit'])

f_mac_lib = m_mac.PageSpeedFactory(target='Release',
    tests=['unit'])

f_linux_fx = m_linux.FirefoxAddOnFactory(target='Release',
                                         tests=['firefox'])

f_win_fx = m_win.FirefoxAddOnFactory(project='all.sln',
                                     target='Release',
                                     tests=['firefox'])

f_mac_fx = m_mac.FirefoxAddOnFactory(
    target='Release',
    tests=['firefox'])

f_linux_chromium = m_linux.ChromiumExtensionFactory(
    target='Release',
    tests=['chromium'])

f_win_chromium = m_win.ChromiumExtensionFactory(
    project='all.sln',
    target='Release',
    tests=['chromium'])

f_mac_chromium = m_mac.ChromiumExtensionFactory(
    target='Release',
    tests=['chromium'])

f_linux_mps = m_linux.ModPageSpeedFactory(
    target='Release',
    tests=['modpagespeed'])

# Only the core part of mod_pagespeed is intended to build on Windows
# and Mac. The target 'html_minifier_main' is used to exercise
# building of those core libraries.
f_win_mps = m_win.ModPageSpeedFactory(
    project='all.sln;html_minifier_main',
    target='Release')

f_mac_mps = m_mac.ModPageSpeedFactory(
    target='Release',
    options=['--xcode-target', 'html_minifier_main',
             '--solution', '../net/instaweb/instaweb_core.xcodeproj'])


# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

b_windows_xp_lib = {'name': 'Windows XP Lib',
                    'factory': f_win_lib,
                    'category': 'lib'}
b_windows_7_lib = {'name': 'Windows 7 Lib',
                   'factory': f_win_lib,
                   'category': 'lib'}
b_lucid_64_lib = {'name': 'Lucid 64 Lib',
                  'factory': f_linux_lib,
                  'category': 'lib'}
b_lucid_32_lib = {'name': 'Lucid 32 Lib',
                  'factory': f_linux_lib,
                  'category': 'lib'}
b_mac10_6_lib = {'name': 'Mac 10.6 Lib',
                 'factory': f_mac_lib,
                 'category': 'lib'}
b_windows_xp_fx = {'name': 'Windows XP Fx',
                   'factory': f_win_fx,
                   'category': 'firefox'}
b_windows_7_fx = {'name': 'Windows 7 Fx',
                  'factory': f_win_fx,
                  'category': 'firefox'}
b_lucid_64_fx = {'name': 'Lucid 64 Fx',
                 'factory': f_linux_fx,
                 'category': 'firefox'}
b_lucid_32_fx = {'name': 'Lucid 32 Fx',
                 'factory': f_linux_fx,
                 'category': 'firefox'}
b_mac10_6_fx = {'name': 'Mac 10.6 Fx',
                'factory': f_mac_fx,
                'category': 'firefox'}
b_windows_xp_chromium = {'name': 'Windows XP Chromium',
                         'factory': f_win_chromium,
                         'category': 'chromium'}
b_windows_7_chromium = {'name': 'Windows 7 Chromium',
                        'factory': f_win_chromium,
                        'category': 'chromium'}
b_lucid_64_chromium = {'name': 'Lucid 64 Chromium',
                       'factory': f_linux_chromium,
                       'category': 'chromium'}
b_lucid_32_chromium = {'name': 'Lucid 32 Chromium',
                       'factory': f_linux_chromium,
                       'category': 'chromium'}
b_mac10_6_chromium = {'name': 'Mac 10.6 Chromium',
                      'factory': f_mac_chromium,
                      'category': 'chromium'}
b_windows_xp_mps = {'name': 'Windows XP MPS',
                    'factory': f_win_mps,
                    'category': 'modpagespeed'}
b_windows_7_mps = {'name': 'Windows 7 MPS',
                   'factory': f_win_mps,
                   'category': 'modpagespeed'}
b_lucid_64_mps = {'name': 'Lucid 64 MPS',
                  'factory': f_linux_mps,
                  'category': 'modpagespeed'}
b_lucid_32_mps = {'name': 'Lucid 32 MPS',
                  'factory': f_linux_mps,
                  'category': 'modpagespeed'}
b_mac10_6_mps = {'name': 'Mac 10.6 MPS',
                 'factory': f_mac_mps,
                 'category': 'modpagespeed'}

c['builders'] = [
  b_windows_xp_lib,
  b_windows_7_lib,
  b_lucid_64_lib,
  b_lucid_32_lib,
  b_mac10_6_lib,
  b_windows_xp_fx,
  b_windows_7_fx,
  b_lucid_64_fx,
  b_lucid_32_fx,
  b_mac10_6_fx,
  b_windows_xp_chromium,
  b_windows_7_chromium,
  b_lucid_64_chromium,
  b_lucid_32_chromium,
  b_mac10_6_chromium,
  b_windows_xp_mps,
  b_windows_7_mps,
  b_lucid_64_mps,
  b_lucid_32_mps,
  b_mac10_6_mps,
]

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'PageSpeed')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)

####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html="../master.chromium/public_html",
    templates=['./templates', '../master.chromium/templates'])

# For each builder category, this is the list of build steps that must
# succeed.
categories_steps = {
    'lib': ['update_scripts', 'update', 'compile',
            'pagespeed_test', 'pagespeed_image_test'],
    'firefox': ['update_scripts', 'update', 'compile',
                'pagespeed_firefox_test'],
    'chromium': ['update_scripts', 'update', 'compile',
                 'pagespeed_chromium_test'],
    'modpagespeed': ['update_scripts', 'update', 'compile'],
}

if TREE_GATE_KEEPER:
  from master import gatekeeper
  # This is the list of the builder categories and the corresponding critical
  # steps. If one critical step fails, gatekeeper will close the tree
  # automatically.
  exclusions = { }
  forgiving_steps = ['update_scripts', 'update', 'svnkill', 'taskkill']
  c['status'].append(gatekeeper.GateKeeper(
      fromaddr=ActiveMaster.from_address,
      categories_steps=categories_steps,
      exclusions=exclusions,
      relayhost=config.Master.smtp,
      subject='buildbot %(result)s in %(projectName)s on %(builder)s, '
              'revision %(revision)s',
      extraRecipients=ActiveMaster.tree_closing_notification_recipients,
      tree_status_url=ActiveMaster.tree_status_url,
      lookup=master_utils.FilterDomain(),
      forgiving_steps=forgiving_steps,
      use_getname=True))

if GOOD_REVISIONS:
  from master import goodrevisions
  # This is the list of builders with their respective list of critical steps
  # that all need to succeed to mark a revision as successful. A single failure
  # in any of the steps of any of the builders will mark the revision as failed.
  good_revs = {}
  for builder in c['builders']:
    good_revs[builder['name']] = categories_steps[builder['category']]
  c['status'].append(goodrevisions.GoodRevisions(
      good_revision_steps=good_revs,
      store_revisions_url=ActiveMaster.store_revisions_url,
      use_getname=True))

####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/client.pagespeed/'

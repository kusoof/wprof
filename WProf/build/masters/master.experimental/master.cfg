# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'experimental' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

from buildbot.changes import svnpoller
from buildbot.scheduler import Scheduler

from master import build_utils
from master import chromium_step
from master import master_utils
from master import slaves_list
from master.factory import chromium_factory

import config

ActiveMaster = config.Master.Experimental

MAIL_NOTIFIER = False
PB_LISTENER = False
SVN_POLLER = False
STATUS_PUSH = False


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port


####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return build_utils.SplitPath(projects, path)

if SVN_POLLER:
  # Polls config.Master.trunk_url for changes
  trunk_poller = svnpoller.SVNPoller(svnurl=config.Master.trunk_url,
                                     split_file=ChromeTreeFileSplitter,
                                     pollinterval=10)

  c['change_source'] = [trunk_poller]


####### SCHEDULERS

## configure the Schedulers
# Experimental Scheduler
s_chromium_experimental = Scheduler(name='experimental',
                                    branch='src',
                                    treeStableTimer=60,
                                    builderNames=['Chromium Win Experimental',
                                                  'Chromium Mac Experimental',
                                                  'Chromium Linux Experimental'])

c['schedulers'] = [s_chromium_experimental]


####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m = chromium_factory.ChromiumFactory('src/chrome', target_platform='win32')

m_webkit = chromium_factory.ChromiumFactory('src/webkit',
                                            target_platform='win32')

m_linux = chromium_factory.ChromiumFactory('src/build',
                                           target_platform='linux2')

m_mac = chromium_factory.ChromiumFactory('src/build', target_platform='darwin')

f_chromium_win_experimental = m.ChromiumFactory(
    tests=[])

f_chromium_mac_experimental = m_mac.ChromiumFactory(
    tests=[])

f_chromium_linux_experimental = m_linux.ChromiumFactory(
    tests=[])

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

b_chromium_win_experimental = {
  'name': 'Chromium Win Experimental',
  'builddir': 'chromium-win-experimental',
  'factory': f_chromium_win_experimental,
}

b_chromium_mac_experimental = {
  'name': 'Chromium Mac Experimental',
  'builddir': 'chromium-mac-experimental',
  'factory': f_chromium_mac_experimental,
}

b_chromium_linux_experimental = {
  'name': 'Chromium Linux Experimental',
  'builddir': 'chromium-linux-experimental',
  'factory': f_chromium_linux_experimental,
}

c['builders'] = [b_chromium_win_experimental,
                 b_chromium_mac_experimental,
                 b_chromium_linux_experimental]

# Associate the slaves to the builders. The configuration is in slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'Experimental')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster, MAIL_NOTIFIER)

# Add more.

if PB_LISTENER:
  from buildbot.status import client
  c['status'].append(client.PBListener(9988))

# Local event push.
if STATUS_PUSH:
  from buildbot.status.status_push import HttpStatusPush
  # Hint: use a dummy web server to inspect the packets being sent.
  c['status'].append(HttpStatusPush('http://localhost:8000/status-listener'))


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://localhost:8010/'

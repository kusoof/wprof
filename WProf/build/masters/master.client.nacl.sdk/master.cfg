# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'nacl' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import posixpath

from buildbot.changes import svnpoller
from buildbot.scheduler import Scheduler

from master import build_utils
from master import master_utils
from master import slaves_list
from master.factory import chromium_factory
from master.factory import gclient_factory

import config

ActiveMaster = config.Master.NativeClientSDK

TREE_GATE_KEEPER = ActiveMaster.is_production_host
GOOD_REVISIONS = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def NativeClientSDKTreeFileSplitter(path):
  """Filter chromium commits to those relevant to the sdk.

  Arguments:
    path: a path which svn reports has changed.
  Returns:
    A tuple containing (branchname, subpath).
  """
  if (path.startswith('native_client_sdk/') or
      path.startswith('ppapi/') or
      path == 'DEPS'):
    return ('multi', path)
  return None

def NativeClientSDKReleaseTreeFileSplitter(path):
  """Filter chromium commits to those relevant to the sdk release.

  Arguments:
    path: a path which svn reports has changed.
  Returns:
    A tuple containing (branchname, subpath).
  """
  return ('multirel', path)

multi_poller = svnpoller.SVNPoller(
    svnurl='svn://svn.chromium.org/chrome/trunk/src',
    split_file=NativeClientSDKTreeFileSplitter,
    revlinktmpl=(
        'http://src.chromium.org/viewvc/chrome?view=rev&revision=%s'),
    pollinterval=10)

multirel_poller = svnpoller.SVNPoller(
    svnurl=('svn://svn.chromium.org/chrome-internal/trunk/'
            'tools/buildspec/build/chrome-official'),
    split_file=NativeClientSDKReleaseTreeFileSplitter,
    revlinktmpl=(
        'http://chromesshgw.corp.google.com/viewvc/chrome-internal?view=rev&revision=%s'),
    pollinterval=10)

c['change_source'] = [
    multi_poller,
    multirel_poller,
]


####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.


# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

# BuilderTesters using a custom build configuration.
all_factories = []
schedulers = []

branches = ['multi', 'multirel']
for branch in branches:
  factories = []

  if branch == 'multi':
    branch_ext = '-multi'
    official = False
    solution = None
  elif branch == 'multirel':
    branch_ext = '-multirel'
    official = True
    solution = gclient_factory.GClientSolution(
        'svn://svn.chromium.org/chrome-internal/trunk/'
        'tools/buildspec/build/chrome-official',
        custom_vars_list=[
            ('googlecode_url', config.Master.googlecode_url),
            ('sourceforge_url', config.Master.sourceforge_url),
            ('webkit_trunk', config.Master.webkit_trunk_url),
        ],
        custom_deps_list=[
            ('src/pdf', None),
            ('src-pdf', None),
            ('src/third_party/WebKit/LayoutTests', None),
        ],
        needed_components={},
        name='chrome-official')
  else:
    assert False

  m_win = chromium_factory.ChromiumFactory(
      build_dir='src/build', target_platform='win32')
  m_linux = chromium_factory.ChromiumFactory(
      build_dir='src/build', target_platform='linux2')
  m_mac = chromium_factory.ChromiumFactory(
      build_dir='src/build', target_platform='darwin')
  if solution:
    for m in [m_win, m_linux, m_mac]:
      while m._solutions:
        m._solutions.pop()
      m._solutions.append(solution)
  # Some shortcut to simplify the code below.
  F_WIN = m_win.ChromiumFactory
  F_LINUX = m_linux.ChromiumFactory
  F_MAC = m_mac.ChromiumFactory

  # SDKs
  # Label each factory with a catergory code like:
  # '1trunk|closer' indicating: category 1, branch trunk, closes tree on red.
  # See gatekeeper.py for the origin of this arcane syntax.
  code = str(branches.index(branch) + 1) + branch + '|closer'

  factory_properties = {
    'annotated_script': 'nacl_sdk_buildbot_run.py',
    'no_gclient_branch': True,
    'nuke_and_pave': official,
    'gclient_env': {
        'GYP_DEFINES': 'fastbuild=1',
    },
  }
  factory_properties_mac = {
    'annotated_script': 'nacl_sdk_buildbot_run.py',
    'no_gclient_branch': True,
    'nuke_and_pave': official,
    'gclient_env': {
        'GYP_DEFINES': 'fastbuild=1',
        'GYP_GENERATORS': 'ninja',
    },
  }

  tests = ['annotated_steps']

  factories.append(['windows-sdk' + branch_ext, code,
                    F_WIN(clobber=True, target='Release', tests=tests,
                          slave_type='Builder',
                          project='all.sln;chromium_builder_qa_nacl_win64',
                          factory_properties=factory_properties)])
  factories.append(['mac-sdk' + branch_ext, code,
                    F_MAC(clobber=True, target='Release', tests=tests,
                          slave_type='Builder',
                          options=['--build-tool=ninja',
                                   '--compiler=goma-clang',
                                   '--', 'chromium_builder_qa'],
                          factory_properties=factory_properties_mac)])
  factories.append(['linux-sdk' + branch_ext, code,
                     F_LINUX(clobber=True, target='Release', tests=tests,
                             slave_type='Builder',
                             options=['--compiler=goma', 'chromium_builder_qa'],
                             factory_properties=factory_properties)])
  if branch == 'multi':
    factories.append(['pnacl-linux-sdk' + branch_ext, code,
                      F_LINUX(clobber=True, target='Release', tests=tests,
                              slave_type='Builder',
                              options=['--compiler=goma',
                                       'chromium_builder_qa'],
                              factory_properties=factory_properties)])
    factories.append(['pnacl-mac-sdk' + branch_ext, code,
                      F_MAC(clobber=True, target='Release', tests=tests,
                            slave_type='Builder',
                            options=['--build-tool=ninja',
                                     '--compiler=goma-clang',
                                     '--', 'chromium_builder_qa'],
                            factory_properties=factory_properties_mac)])
    factories.append(['pnacl-win-sdk' + branch_ext, code,
                      F_WIN(clobber=True, target='Release', tests=tests,
                            slave_type='Builder',
                            project='all.sln;chromium_builder_qa_nacl_win64',
                            factory_properties=factory_properties)])

  s_nacl = Scheduler(
      name='nacl-' + branch,
      branch=branch,
      treeStableTimer=0,
      builderNames=[f[0] for f in factories],
  )

  schedulers.append(s_nacl)
  all_factories += factories

c['schedulers'] = schedulers


# Convert factories to a list of (factory_name, factory_object) pairs.
factories_bare = [(f[0], f[2]) for f in factories]
# Create mapping of builder name to list of steps.
builder_steps = build_utils.ExtractFactoriesSteps(factories_bare)
all_steps = build_utils.AllFactoriesSteps(factories_bare)





# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

c['builders'] = []
slaves = slaves_list.SlavesList('slaves.cfg', 'NativeClientSDK')
for f in all_factories:
  c['builders'].append({
      'name': f[0],
      'slavenames': slaves.GetSlavesName(builder=f[0]),
      'builddir': f[0],
      'factory': f[2],
      'category': '%s|full' % f[1],
      # Don't enable auto_reboot for people testing locally.
      'auto_reboot': ActiveMaster.is_production_host,
  })


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
                             order_console_by_time=True,
                             public_html='../master.chromium/public_html',
                             templates=['./templates',
                                        '../master.client.nacl/templates'])

# Add more.

if TREE_GATE_KEEPER:
  from master import gatekeeper
  # This is the list of the builder categories and the corresponding critical
  # steps. If one critical step fails, gatekeeper will close the tree
  # automatically.
  categories_steps = {
      '': ['update scripts', 'update'],
      'info': [],
      'closer': all_steps,
  }
  exclusions = {}
  forgiving_steps = []
  c['status'].append(gatekeeper.GateKeeper(
      fromaddr=ActiveMaster.from_address,
      categories_steps=categories_steps,
      exclusions=exclusions,
      relayhost=config.Master.smtp,
      subject='buildbot %(result)s in %(projectName)s on %(builder)s, '
              'revision %(revision)s',
      extraRecipients=ActiveMaster.tree_closing_notification_recipients,
      tree_status_url=ActiveMaster.tree_status_url,
      lookup=master_utils.FilterDomain(),
      forgiving_steps=forgiving_steps))

if GOOD_REVISIONS:
  from master import goodrevisions
  # This is the list of builders with their respective list of critical steps
  # that all need to succeed to mark a revision as successful. A single failure
  # in any of the steps of any of the builders will mark the revision as failed.
  c['status'].append(goodrevisions.GoodRevisions(
      good_revision_steps=builder_steps,
      store_revisions_url=ActiveMaster.store_revisions_url))


####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/client.nacl.sdk/'

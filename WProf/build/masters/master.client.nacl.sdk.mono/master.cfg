# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'nacl' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import posixpath

from buildbot.changes.pb import PBChangeSource
from buildbot.scheduler import Scheduler

from master import build_utils
from master import master_utils
from master import slaves_list
from master.factory import nacl_sdk_factory

import config

ActiveMaster = config.Master.NativeClientSDKMono

TREE_GATE_KEEPER = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

pb_source = PBChangeSource()

c['change_source'] = [pb_source]


####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.


# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

# BuilderTesters using a custom build configuration.
factories = []
schedulers = []

m_linux = nacl_sdk_factory.NativeClientSDKFactory(
    build_dir='src/native_client_sdk/src',
    target_platform='linux2',
    branch='trunk',
    alternate_url=config.Master.trunk_url_src)
F_LINUX = m_linux.NativeClientSDKFactory

factories.append(['linux-sdk-mono32', '1linux|closer', F_LINUX(clobber=True)])
factories.append(['linux-sdk-mono64', '1linux|closer', F_LINUX(clobber=True)])

s_nacl = Scheduler(
    name='nacl-mono',
    branch=None,
    treeStableTimer=0,
    builderNames=[f[0] for f in factories],
)

schedulers.append(s_nacl)

c['schedulers'] = schedulers


# Convert factories to a list of (factory_name, factory_object) pairs.
factories_bare = [(f[0], f[2]) for f in factories]
# Create mapping of builder name to list of steps.
builder_steps = build_utils.ExtractFactoriesSteps(factories_bare)
all_steps = build_utils.AllFactoriesSteps(factories_bare)


# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

c['builders'] = []
slaves = slaves_list.SlavesList('slaves.cfg', 'NativeClientSDKMono')
for f in factories:
  c['builders'].append({
      'name': f[0],
      'slavenames': slaves.GetSlavesName(builder=f[0]),
      'builddir': f[0],
      'factory': f[2],
      'category': '%s|full' % f[1],
      # Don't enable auto_reboot for people testing locally.
      'auto_reboot': ActiveMaster.is_production_host,
  })


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
                             order_console_by_time=True,
                             public_html='../master.chromium/public_html',
                             templates=['./templates',
                                        '../master.client.nacl/templates'])

if TREE_GATE_KEEPER:
  from master import gatekeeper
  # This is the list of the builder categories and the corresponding critical
  # steps. If one critical step fails, gatekeeper will close the tree
  # automatically.
  categories_steps = {
      '': ['update scripts', 'update'],
      'info': [],
      'closer': all_steps,
  }
  exclusions = {}
  forgiving_steps = []
  c['status'].append(gatekeeper.GateKeeper(
      fromaddr=ActiveMaster.from_address,
      categories_steps=categories_steps,
      exclusions=exclusions,
      relayhost=config.Master.smtp,
      subject='buildbot %(result)s in %(projectName)s on %(builder)s, '
              'revision %(revision)s',
      extraRecipients=['elijahtaylor@chromium.org'],
      tree_status_url=None,
      lookup='google.com',
      forgiving_steps=forgiving_steps,
      sendToInterestedUsers=False))


####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/client.nacl.sdk.mono/'
